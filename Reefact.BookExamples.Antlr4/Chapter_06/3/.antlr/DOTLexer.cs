//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DOT.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DOTLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, STRICT=11, GRAPH=12, DIGRAPH=13, NODE=14, EDGE=15, SUBGRAPH=16, 
		ID=17, NUMBER=18, STRING=19, HTML_STRING=20, PREPROC=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "STRICT", "GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "ID", 
		"LETTER", "NUMBER", "DIGIT", "STRING", "HTML_STRING", "TAG", "PREPROC"
	};


	public DOTLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DOTLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'['", "']'", "','", "'->'", "'--'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "STRICT", 
		"GRAPH", "DIGRAPH", "NODE", "EDGE", "SUBGRAPH", "ID", "NUMBER", "STRING", 
		"HTML_STRING", "PREPROC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DOT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DOTLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,115,8,16,10,16,12,16,
		118,9,16,1,17,1,17,1,18,3,18,123,8,18,1,18,1,18,4,18,127,8,18,11,18,12,
		18,128,1,18,4,18,132,8,18,11,18,12,18,133,1,18,1,18,5,18,138,8,18,10,18,
		12,18,141,9,18,3,18,143,8,18,3,18,145,8,18,1,19,1,19,1,20,1,20,1,20,1,
		20,5,20,153,8,20,10,20,12,20,156,9,20,1,20,1,20,1,21,1,21,1,21,5,21,163,
		8,21,10,21,12,21,166,9,21,1,21,1,21,1,22,1,22,5,22,172,8,22,10,22,12,22,
		175,9,22,1,22,1,22,1,23,1,23,5,23,181,8,23,10,23,12,23,184,9,23,1,23,1,
		23,1,23,1,23,3,154,173,182,0,24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,18,39,0,41,19,
		43,20,45,0,47,21,1,0,18,2,0,83,83,115,115,2,0,84,84,116,116,2,0,82,82,
		114,114,2,0,73,73,105,105,2,0,67,67,99,99,2,0,71,71,103,103,2,0,65,65,
		97,97,2,0,80,80,112,112,2,0,72,72,104,104,2,0,68,68,100,100,2,0,78,78,
		110,110,2,0,79,79,111,111,2,0,69,69,101,101,2,0,85,85,117,117,2,0,66,66,
		98,98,4,0,65,90,95,95,97,122,128,255,1,0,48,57,2,0,60,60,62,62,199,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,37,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,51,
		1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,59,1,0,0,0,13,61,1,0,
		0,0,15,63,1,0,0,0,17,66,1,0,0,0,19,69,1,0,0,0,21,71,1,0,0,0,23,78,1,0,
		0,0,25,84,1,0,0,0,27,92,1,0,0,0,29,97,1,0,0,0,31,102,1,0,0,0,33,111,1,
		0,0,0,35,119,1,0,0,0,37,122,1,0,0,0,39,146,1,0,0,0,41,148,1,0,0,0,43,159,
		1,0,0,0,45,169,1,0,0,0,47,178,1,0,0,0,49,50,5,123,0,0,50,2,1,0,0,0,51,
		52,5,125,0,0,52,4,1,0,0,0,53,54,5,59,0,0,54,6,1,0,0,0,55,56,5,61,0,0,56,
		8,1,0,0,0,57,58,5,91,0,0,58,10,1,0,0,0,59,60,5,93,0,0,60,12,1,0,0,0,61,
		62,5,44,0,0,62,14,1,0,0,0,63,64,5,45,0,0,64,65,5,62,0,0,65,16,1,0,0,0,
		66,67,5,45,0,0,67,68,5,45,0,0,68,18,1,0,0,0,69,70,5,58,0,0,70,20,1,0,0,
		0,71,72,7,0,0,0,72,73,7,1,0,0,73,74,7,2,0,0,74,75,7,3,0,0,75,76,7,4,0,
		0,76,77,7,1,0,0,77,22,1,0,0,0,78,79,7,5,0,0,79,80,7,2,0,0,80,81,7,6,0,
		0,81,82,7,7,0,0,82,83,7,8,0,0,83,24,1,0,0,0,84,85,7,9,0,0,85,86,7,3,0,
		0,86,87,7,5,0,0,87,88,7,2,0,0,88,89,7,6,0,0,89,90,7,7,0,0,90,91,7,8,0,
		0,91,26,1,0,0,0,92,93,7,10,0,0,93,94,7,11,0,0,94,95,7,9,0,0,95,96,7,12,
		0,0,96,28,1,0,0,0,97,98,7,12,0,0,98,99,7,9,0,0,99,100,7,5,0,0,100,101,
		7,12,0,0,101,30,1,0,0,0,102,103,7,0,0,0,103,104,7,13,0,0,104,105,7,14,
		0,0,105,106,7,5,0,0,106,107,7,2,0,0,107,108,7,6,0,0,108,109,7,7,0,0,109,
		110,7,8,0,0,110,32,1,0,0,0,111,116,3,35,17,0,112,115,3,35,17,0,113,115,
		3,39,19,0,114,112,1,0,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,
		0,0,116,117,1,0,0,0,117,34,1,0,0,0,118,116,1,0,0,0,119,120,7,15,0,0,120,
		36,1,0,0,0,121,123,5,45,0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,144,1,
		0,0,0,124,126,5,46,0,0,125,127,3,39,19,0,126,125,1,0,0,0,127,128,1,0,0,
		0,128,126,1,0,0,0,128,129,1,0,0,0,129,145,1,0,0,0,130,132,3,39,19,0,131,
		130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,142,1,
		0,0,0,135,139,5,46,0,0,136,138,3,39,19,0,137,136,1,0,0,0,138,141,1,0,0,
		0,139,137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,
		135,1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,124,1,0,0,0,144,131,1,
		0,0,0,145,38,1,0,0,0,146,147,7,16,0,0,147,40,1,0,0,0,148,154,5,34,0,0,
		149,150,5,92,0,0,150,153,5,34,0,0,151,153,9,0,0,0,152,149,1,0,0,0,152,
		151,1,0,0,0,153,156,1,0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,157,1,
		0,0,0,156,154,1,0,0,0,157,158,5,34,0,0,158,42,1,0,0,0,159,164,5,60,0,0,
		160,163,3,45,22,0,161,163,8,17,0,0,162,160,1,0,0,0,162,161,1,0,0,0,163,
		166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,
		0,0,0,167,168,5,62,0,0,168,44,1,0,0,0,169,173,5,60,0,0,170,172,9,0,0,0,
		171,170,1,0,0,0,172,175,1,0,0,0,173,174,1,0,0,0,173,171,1,0,0,0,174,176,
		1,0,0,0,175,173,1,0,0,0,176,177,5,62,0,0,177,46,1,0,0,0,178,182,5,35,0,
		0,179,181,9,0,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,183,1,0,0,0,182,
		180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,10,0,0,186,187,1,
		0,0,0,187,188,6,23,0,0,188,48,1,0,0,0,15,0,114,116,122,128,133,139,142,
		144,152,154,162,164,173,182,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
