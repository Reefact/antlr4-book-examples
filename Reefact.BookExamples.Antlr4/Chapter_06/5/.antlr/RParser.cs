//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from R.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, HEX=55, INT=56, FLOAT=57, COMPLEX=58, STRING=59, ID=60, 
		USER_OP=61, NL=62, WS=63;
	public const int
		RULE_prog = 0, RULE_expr_or_assign = 1, RULE_expr = 2, RULE_exprlist = 3, 
		RULE_formlist = 4, RULE_form = 5, RULE_sublist = 6, RULE_sub = 7;
	public static readonly string[] ruleNames = {
		"prog", "expr_or_assign", "expr", "exprlist", "formlist", "form", "sublist", 
		"sub"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'<-'", "'='", "'<<-'", "'[['", "']'", "'['", "'::'", "':::'", 
		"'$'", "'@'", "'^'", "'-'", "'+'", "':'", "'*'", "'/'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'!'", "'&'", "'&&'", "'|'", "'||'", "'~'", 
		"'->'", "'->>'", "':='", "'function'", "'('", "')'", "'{'", "'}'", "'if'", 
		"'else'", "'for'", "'in'", "'while'", "'repeat'", "'?'", "'next'", "'break'", 
		"'NULL'", "'NA'", "'Inf'", "'NaN'", "'TRUE'", "'FALSE'", "','", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "HEX", "INT", "FLOAT", "COMPLEX", 
		"STRING", "ID", "USER_OP", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "R.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_or_assignContext[] expr_or_assign() {
			return GetRuleContexts<Expr_or_assignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_or_assignContext expr_or_assign(int i) {
			return GetRuleContext<Expr_or_assignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RParser.NL, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 6890504501262835712L) != 0) {
				{
				State = 20;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__13:
				case T__23:
				case T__28:
				case T__32:
				case T__33:
				case T__35:
				case T__37:
				case T__39:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case HEX:
				case INT:
				case FLOAT:
				case COMPLEX:
				case STRING:
				case ID:
					{
					State = 16;
					expr_or_assign();
					State = 17;
					_la = TokenStream.LA(1);
					if ( !(_la==T__0 || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case NL:
					{
					State = 19;
					Match(NL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_or_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_or_assignContext expr_or_assign() {
			return GetRuleContext<Expr_or_assignContext>(0);
		}
		public Expr_or_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_or_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterExpr_or_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitExpr_or_assign(this);
		}
	}

	[RuleVersion(0)]
	public Expr_or_assignContext expr_or_assign() {
		Expr_or_assignContext _localctx = new Expr_or_assignContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr_or_assign);
		int _la;
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				expr(0);
				State = 28;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 29;
				expr_or_assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormlistContext formlist() {
			return GetRuleContext<FormlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(RParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX() { return GetToken(RParser.COMPLEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_OP() { return GetToken(RParser.USER_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SublistContext sublist() {
			return GetRuleContext<SublistContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 35;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__13) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 36;
				expr(36);
				}
				break;
			case 2:
				{
				State = 37;
				Match(T__23);
				State = 38;
				expr(30);
				}
				break;
			case 3:
				{
				State = 39;
				Match(T__28);
				State = 40;
				expr(27);
				}
				break;
			case 4:
				{
				State = 41;
				Match(T__32);
				State = 42;
				Match(T__33);
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__53 || _la==ID) {
					{
					State = 43;
					formlist();
					}
				}

				State = 46;
				Match(T__34);
				State = 47;
				expr(24);
				}
				break;
			case 5:
				{
				State = 48;
				Match(T__35);
				State = 49;
				exprlist();
				State = 50;
				Match(T__36);
				}
				break;
			case 6:
				{
				State = 52;
				Match(T__37);
				State = 53;
				Match(T__33);
				State = 54;
				expr(0);
				State = 55;
				Match(T__34);
				State = 56;
				expr(21);
				}
				break;
			case 7:
				{
				State = 58;
				Match(T__37);
				State = 59;
				Match(T__33);
				State = 60;
				expr(0);
				State = 61;
				Match(T__34);
				State = 62;
				expr(0);
				State = 63;
				Match(T__38);
				State = 64;
				expr(20);
				}
				break;
			case 8:
				{
				State = 66;
				Match(T__39);
				State = 67;
				Match(T__33);
				State = 68;
				Match(ID);
				State = 69;
				Match(T__40);
				State = 70;
				expr(0);
				State = 71;
				Match(T__34);
				State = 72;
				expr(19);
				}
				break;
			case 9:
				{
				State = 74;
				Match(T__41);
				State = 75;
				Match(T__33);
				State = 76;
				expr(0);
				State = 77;
				Match(T__34);
				State = 78;
				expr(18);
				}
				break;
			case 10:
				{
				State = 80;
				Match(T__42);
				State = 81;
				expr(17);
				}
				break;
			case 11:
				{
				State = 82;
				Match(T__43);
				State = 83;
				expr(16);
				}
				break;
			case 12:
				{
				State = 84;
				Match(T__44);
				}
				break;
			case 13:
				{
				State = 85;
				Match(T__45);
				}
				break;
			case 14:
				{
				State = 86;
				Match(T__33);
				State = 87;
				expr(0);
				State = 88;
				Match(T__34);
				}
				break;
			case 15:
				{
				State = 90;
				Match(ID);
				}
				break;
			case 16:
				{
				State = 91;
				Match(STRING);
				}
				break;
			case 17:
				{
				State = 92;
				Match(HEX);
				}
				break;
			case 18:
				{
				State = 93;
				Match(INT);
				}
				break;
			case 19:
				{
				State = 94;
				Match(FLOAT);
				}
				break;
			case 20:
				{
				State = 95;
				Match(COMPLEX);
				}
				break;
			case 21:
				{
				State = 96;
				Match(T__46);
				}
				break;
			case 22:
				{
				State = 97;
				Match(T__47);
				}
				break;
			case 23:
				{
				State = 98;
				Match(T__48);
				}
				break;
			case 24:
				{
				State = 99;
				Match(T__49);
				}
				break;
			case 25:
				{
				State = 100;
				Match(T__50);
				}
				break;
			case 26:
				{
				State = 101;
				Match(T__51);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 105;
						_la = TokenStream.LA(1);
						if ( !(_la==T__7 || _la==T__8) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106;
						expr(40);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 108;
						_la = TokenStream.LA(1);
						if ( !(_la==T__9 || _la==T__10) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 109;
						expr(39);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 110;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 111;
						Match(T__11);
						State = 112;
						expr(37);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 113;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 114;
						Match(T__14);
						State = 115;
						expr(36);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 116;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 117;
						Match(USER_OP);
						State = 118;
						expr(35);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 119;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 120;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 121;
						expr(34);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 122;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 123;
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 124;
						expr(33);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 125;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 126;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 16515072L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 127;
						expr(32);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 128;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 129;
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__25) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 130;
						expr(30);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 132;
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__27) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 133;
						expr(29);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 134;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 135;
						Match(T__28);
						State = 136;
						expr(27);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 137;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 138;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 139;
						expr(26);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 141;
						Match(T__4);
						State = 142;
						sublist();
						State = 143;
						Match(T__5);
						State = 144;
						Match(T__5);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 146;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 147;
						Match(T__6);
						State = 148;
						sublist();
						State = 149;
						Match(T__5);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 152;
						Match(T__33);
						State = 153;
						sublist();
						State = 154;
						Match(T__34);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_or_assignContext[] expr_or_assign() {
			return GetRuleContexts<Expr_or_assignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_or_assignContext expr_or_assign(int i) {
			return GetRuleContext<Expr_or_assignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RParser.NL, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 6, RULE_exprlist);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__13:
			case T__23:
			case T__28:
			case T__32:
			case T__33:
			case T__35:
			case T__37:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case HEX:
			case INT:
			case FLOAT:
			case COMPLEX:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				expr_or_assign();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0 || _la==NL) {
					{
					{
					State = 162;
					_la = TokenStream.LA(1);
					if ( !(_la==T__0 || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2278818482835447808L) != 0) {
						{
						State = 163;
						expr_or_assign();
						}
					}

					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FormlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormlist(this);
		}
	}

	[RuleVersion(0)]
	public FormlistContext formlist() {
		FormlistContext _localctx = new FormlistContext(Context, State);
		EnterRule(_localctx, 8, RULE_formlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			form();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__52) {
				{
				{
				State = 175;
				Match(T__52);
				State = 176;
				form();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 10, RULE_form);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(ID);
				State = 184;
				Match(T__2);
				State = 185;
				expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(T__53);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SublistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubContext[] sub() {
			return GetRuleContexts<SubContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubContext sub(int i) {
			return GetRuleContext<SubContext>(i);
		}
		public SublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sublist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSublist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSublist(this);
		}
	}

	[RuleVersion(0)]
	public SublistContext sublist() {
		SublistContext _localctx = new SublistContext(Context, State);
		EnterRule(_localctx, 12, RULE_sublist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			sub();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__52) {
				{
				{
				State = 190;
				Match(T__52);
				State = 191;
				sub();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RParser.STRING, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 14, RULE_sub);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(ID);
				State = 199;
				Match(T__2);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				Match(ID);
				State = 201;
				Match(T__2);
				State = 202;
				expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 203;
				Match(STRING);
				State = 204;
				Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				Match(STRING);
				State = 206;
				Match(T__2);
				State = 207;
				expr(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 208;
				Match(T__46);
				State = 209;
				Match(T__2);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 210;
				Match(T__46);
				State = 211;
				Match(T__2);
				State = 212;
				expr(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 213;
				Match(T__53);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 39);
		case 1: return Precpred(Context, 38);
		case 2: return Precpred(Context, 37);
		case 3: return Precpred(Context, 35);
		case 4: return Precpred(Context, 34);
		case 5: return Precpred(Context, 33);
		case 6: return Precpred(Context, 32);
		case 7: return Precpred(Context, 31);
		case 8: return Precpred(Context, 29);
		case 9: return Precpred(Context, 28);
		case 10: return Precpred(Context, 26);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 41);
		case 13: return Precpred(Context, 40);
		case 14: return Precpred(Context, 23);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,218,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,5,0,21,8,0,10,0,12,0,24,9,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,3,1,33,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,45,8,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,103,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,5,2,157,8,2,10,2,12,2,160,9,2,1,3,1,3,1,3,3,3,165,
		8,3,5,3,167,8,3,10,3,12,3,170,9,3,1,3,3,3,173,8,3,1,4,1,4,1,4,5,4,178,
		8,4,10,4,12,4,181,9,4,1,5,1,5,1,5,1,5,1,5,3,5,188,8,5,1,6,1,6,1,6,5,6,
		193,8,6,10,6,12,6,196,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,216,8,7,1,7,0,1,4,8,0,2,4,6,8,10,12,14,
		0,10,2,0,1,1,62,62,1,0,2,4,1,0,13,14,1,0,8,9,1,0,10,11,1,0,16,17,1,0,18,
		23,1,0,25,26,1,0,27,28,1,0,30,32,268,0,22,1,0,0,0,2,32,1,0,0,0,4,102,1,
		0,0,0,6,172,1,0,0,0,8,174,1,0,0,0,10,187,1,0,0,0,12,189,1,0,0,0,14,215,
		1,0,0,0,16,17,3,2,1,0,17,18,7,0,0,0,18,21,1,0,0,0,19,21,5,62,0,0,20,16,
		1,0,0,0,20,19,1,0,0,0,21,24,1,0,0,0,22,20,1,0,0,0,22,23,1,0,0,0,23,25,
		1,0,0,0,24,22,1,0,0,0,25,26,5,0,0,1,26,1,1,0,0,0,27,28,3,4,2,0,28,29,7,
		1,0,0,29,30,3,2,1,0,30,33,1,0,0,0,31,33,3,4,2,0,32,27,1,0,0,0,32,31,1,
		0,0,0,33,3,1,0,0,0,34,35,6,2,-1,0,35,36,7,2,0,0,36,103,3,4,2,36,37,38,
		5,24,0,0,38,103,3,4,2,30,39,40,5,29,0,0,40,103,3,4,2,27,41,42,5,33,0,0,
		42,44,5,34,0,0,43,45,3,8,4,0,44,43,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,
		46,47,5,35,0,0,47,103,3,4,2,24,48,49,5,36,0,0,49,50,3,6,3,0,50,51,5,37,
		0,0,51,103,1,0,0,0,52,53,5,38,0,0,53,54,5,34,0,0,54,55,3,4,2,0,55,56,5,
		35,0,0,56,57,3,4,2,21,57,103,1,0,0,0,58,59,5,38,0,0,59,60,5,34,0,0,60,
		61,3,4,2,0,61,62,5,35,0,0,62,63,3,4,2,0,63,64,5,39,0,0,64,65,3,4,2,20,
		65,103,1,0,0,0,66,67,5,40,0,0,67,68,5,34,0,0,68,69,5,60,0,0,69,70,5,41,
		0,0,70,71,3,4,2,0,71,72,5,35,0,0,72,73,3,4,2,19,73,103,1,0,0,0,74,75,5,
		42,0,0,75,76,5,34,0,0,76,77,3,4,2,0,77,78,5,35,0,0,78,79,3,4,2,18,79,103,
		1,0,0,0,80,81,5,43,0,0,81,103,3,4,2,17,82,83,5,44,0,0,83,103,3,4,2,16,
		84,103,5,45,0,0,85,103,5,46,0,0,86,87,5,34,0,0,87,88,3,4,2,0,88,89,5,35,
		0,0,89,103,1,0,0,0,90,103,5,60,0,0,91,103,5,59,0,0,92,103,5,55,0,0,93,
		103,5,56,0,0,94,103,5,57,0,0,95,103,5,58,0,0,96,103,5,47,0,0,97,103,5,
		48,0,0,98,103,5,49,0,0,99,103,5,50,0,0,100,103,5,51,0,0,101,103,5,52,0,
		0,102,34,1,0,0,0,102,37,1,0,0,0,102,39,1,0,0,0,102,41,1,0,0,0,102,48,1,
		0,0,0,102,52,1,0,0,0,102,58,1,0,0,0,102,66,1,0,0,0,102,74,1,0,0,0,102,
		80,1,0,0,0,102,82,1,0,0,0,102,84,1,0,0,0,102,85,1,0,0,0,102,86,1,0,0,0,
		102,90,1,0,0,0,102,91,1,0,0,0,102,92,1,0,0,0,102,93,1,0,0,0,102,94,1,0,
		0,0,102,95,1,0,0,0,102,96,1,0,0,0,102,97,1,0,0,0,102,98,1,0,0,0,102,99,
		1,0,0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,158,1,0,0,0,104,105,10,39,
		0,0,105,106,7,3,0,0,106,157,3,4,2,40,107,108,10,38,0,0,108,109,7,4,0,0,
		109,157,3,4,2,39,110,111,10,37,0,0,111,112,5,12,0,0,112,157,3,4,2,37,113,
		114,10,35,0,0,114,115,5,15,0,0,115,157,3,4,2,36,116,117,10,34,0,0,117,
		118,5,61,0,0,118,157,3,4,2,35,119,120,10,33,0,0,120,121,7,5,0,0,121,157,
		3,4,2,34,122,123,10,32,0,0,123,124,7,2,0,0,124,157,3,4,2,33,125,126,10,
		31,0,0,126,127,7,6,0,0,127,157,3,4,2,32,128,129,10,29,0,0,129,130,7,7,
		0,0,130,157,3,4,2,30,131,132,10,28,0,0,132,133,7,8,0,0,133,157,3,4,2,29,
		134,135,10,26,0,0,135,136,5,29,0,0,136,157,3,4,2,27,137,138,10,25,0,0,
		138,139,7,9,0,0,139,157,3,4,2,26,140,141,10,41,0,0,141,142,5,5,0,0,142,
		143,3,12,6,0,143,144,5,6,0,0,144,145,5,6,0,0,145,157,1,0,0,0,146,147,10,
		40,0,0,147,148,5,7,0,0,148,149,3,12,6,0,149,150,5,6,0,0,150,157,1,0,0,
		0,151,152,10,23,0,0,152,153,5,34,0,0,153,154,3,12,6,0,154,155,5,35,0,0,
		155,157,1,0,0,0,156,104,1,0,0,0,156,107,1,0,0,0,156,110,1,0,0,0,156,113,
		1,0,0,0,156,116,1,0,0,0,156,119,1,0,0,0,156,122,1,0,0,0,156,125,1,0,0,
		0,156,128,1,0,0,0,156,131,1,0,0,0,156,134,1,0,0,0,156,137,1,0,0,0,156,
		140,1,0,0,0,156,146,1,0,0,0,156,151,1,0,0,0,157,160,1,0,0,0,158,156,1,
		0,0,0,158,159,1,0,0,0,159,5,1,0,0,0,160,158,1,0,0,0,161,168,3,2,1,0,162,
		164,7,0,0,0,163,165,3,2,1,0,164,163,1,0,0,0,164,165,1,0,0,0,165,167,1,
		0,0,0,166,162,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,
		169,173,1,0,0,0,170,168,1,0,0,0,171,173,1,0,0,0,172,161,1,0,0,0,172,171,
		1,0,0,0,173,7,1,0,0,0,174,179,3,10,5,0,175,176,5,53,0,0,176,178,3,10,5,
		0,177,175,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		9,1,0,0,0,181,179,1,0,0,0,182,188,5,60,0,0,183,184,5,60,0,0,184,185,5,
		3,0,0,185,188,3,4,2,0,186,188,5,54,0,0,187,182,1,0,0,0,187,183,1,0,0,0,
		187,186,1,0,0,0,188,11,1,0,0,0,189,194,3,14,7,0,190,191,5,53,0,0,191,193,
		3,14,7,0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,
		0,195,13,1,0,0,0,196,194,1,0,0,0,197,216,3,4,2,0,198,199,5,60,0,0,199,
		216,5,3,0,0,200,201,5,60,0,0,201,202,5,3,0,0,202,216,3,4,2,0,203,204,5,
		59,0,0,204,216,5,3,0,0,205,206,5,59,0,0,206,207,5,3,0,0,207,216,3,4,2,
		0,208,209,5,47,0,0,209,216,5,3,0,0,210,211,5,47,0,0,211,212,5,3,0,0,212,
		216,3,4,2,0,213,216,5,54,0,0,214,216,1,0,0,0,215,197,1,0,0,0,215,198,1,
		0,0,0,215,200,1,0,0,0,215,203,1,0,0,0,215,205,1,0,0,0,215,208,1,0,0,0,
		215,210,1,0,0,0,215,213,1,0,0,0,215,214,1,0,0,0,216,15,1,0,0,0,14,20,22,
		32,44,102,156,158,164,168,172,179,187,194,215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
