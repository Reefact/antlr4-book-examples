//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PropertyFile.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PropertyFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ID=4, STRING=5;
	public const int
		RULE_file = 0, RULE_prop = 1;
	public static readonly string[] ruleNames = {
		"file", "prop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'\\r'", "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ID", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PropertyFile.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PropertyFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		protected virtual void StartFile() { } // blank implementations
		protected virtual void FinishFile() { }
		protected virtual void DefineProperty(IToken name, IToken value) { }

		public PropertyFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PropertyFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropertyFileListener typedListener = listener as IPropertyFileListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropertyFileListener typedListener = listener as IPropertyFileListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			StartFile();
			State = 6;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5;
				prop();
				}
				}
				State = 8;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			FinishFile();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public IToken _ID;
		public IToken _STRING;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PropertyFileParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PropertyFileParser.STRING, 0); }
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropertyFileListener typedListener = listener as IPropertyFileListener;
			if (typedListener != null) typedListener.EnterProp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropertyFileListener typedListener = listener as IPropertyFileListener;
			if (typedListener != null) typedListener.ExitProp(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 2, RULE_prop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			_localctx._ID = Match(ID);
			State = 13;
			Match(T__0);
			State = 14;
			_localctx._STRING = Match(STRING);
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 15;
				Match(T__1);
				}
			}

			State = 18;
			Match(T__2);
			DefineProperty(_localctx._ID, _localctx._STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,5,22,2,0,7,0,2,1,7,1,1,0,1,0,4,0,7,8,0,11,0,12,0,8,1,0,1,0,1,1,1,1,
		1,1,1,1,3,1,17,8,1,1,1,1,1,1,1,1,1,0,0,2,0,2,0,0,21,0,4,1,0,0,0,2,12,1,
		0,0,0,4,6,6,0,-1,0,5,7,3,2,1,0,6,5,1,0,0,0,7,8,1,0,0,0,8,6,1,0,0,0,8,9,
		1,0,0,0,9,10,1,0,0,0,10,11,6,0,-1,0,11,1,1,0,0,0,12,13,5,4,0,0,13,14,5,
		1,0,0,14,16,5,5,0,0,15,17,5,2,0,0,16,15,1,0,0,0,16,17,1,0,0,0,17,18,1,
		0,0,0,18,19,5,3,0,0,19,20,6,1,-1,0,20,3,1,0,0,0,2,8,16
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
