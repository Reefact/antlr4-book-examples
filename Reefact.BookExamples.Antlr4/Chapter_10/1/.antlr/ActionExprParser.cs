//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ActionExpr.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace Reefact.Tools;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ActionExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ID=4, INT=5, NEWLINE=6, WS=7, MUL=8, DIV=9, ADD=10, 
		SUB=11;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", null, null, null, null, "'*'", "'/'", "'+'", 
		"'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ID", "INT", "NEWLINE", "WS", "MUL", "DIV", "ADD", 
		"SUB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ActionExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ActionExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		// "memory" for our calculator; variable/value pairs go here
		private readonly Dictionary<string, int> _memory = new();
		private readonly List<int> _values = new();

		public int Eval(int left, int op, int right) {
			switch(op) {
				case MUL: return left * right;
				case DIV: return left / right;
				case ADD: return left + right;
				case SUB: return left - right;
				default: throw new ArgumentOutOfRangeException();
			}
		}

		public IEnumerable<int> GetOutput() => _values;

		public ActionExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ActionExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6;
				stat();
				}
				}
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 116L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public ExprContext _expr;
		public IToken _ID;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(ActionExprParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ActionExprParser.ID, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 11;
				_localctx._expr = expr(0);
				State = 12;
				Match(NEWLINE);
				 _values.Add(_localctx._expr.v); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				_localctx._ID = Match(ID);
				State = 16;
				Match(T__0);
				State = 17;
				_localctx._expr = expr(0);
				State = 18;
				Match(NEWLINE);
				 _memory.Add((_localctx._ID!=null?_localctx._ID.Text:null), _localctx._expr.v); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21;
				Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public int v;
		public ExprContext a;
		public IToken _INT;
		public IToken _ID;
		public ExprContext _expr;
		public IToken op;
		public ExprContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ActionExprParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ActionExprParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ActionExprParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ActionExprParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ActionExprParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ActionExprParser.SUB, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 25;
				_localctx._INT = Match(INT);
				 _localctx.v =  (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0); 
				}
				break;
			case ID:
				{
				State = 27;
				_localctx._ID = Match(ID);

												string id = (_localctx._ID!=null?_localctx._ID.Text:null);
												_localctx.v =  _memory.ContainsKey(id) ? _memory[id] : 0;
											
				}
				break;
			case T__1:
				{
				State = 29;
				Match(T__1);
				State = 30;
				_localctx._expr = expr(0);
				State = 31;
				Match(T__2);
				 _localctx.v =  _localctx._expr.v; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 46;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 36;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 37;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 38;
						_localctx.b = _localctx._expr = expr(6);
						 _localctx.v =  Eval(_localctx.a.v, (_localctx.op!=null?_localctx.op.Type:0), _localctx.b.v); 
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 41;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 42;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 43;
						_localctx.b = _localctx._expr = expr(5);
						 _localctx.v =  Eval(_localctx.a.v, (_localctx.op!=null?_localctx.op.Type:0), _localctx.b.v); 
						}
						break;
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,11,52,2,0,7,0,2,1,7,1,2,2,7,2,1,0,4,0,8,8,0,11,0,12,0,9,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,23,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,35,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,47,
		8,2,10,2,12,2,50,9,2,1,2,0,1,4,3,0,2,4,0,2,1,0,8,9,1,0,10,11,55,0,7,1,
		0,0,0,2,22,1,0,0,0,4,34,1,0,0,0,6,8,3,2,1,0,7,6,1,0,0,0,8,9,1,0,0,0,9,
		7,1,0,0,0,9,10,1,0,0,0,10,1,1,0,0,0,11,12,3,4,2,0,12,13,5,6,0,0,13,14,
		6,1,-1,0,14,23,1,0,0,0,15,16,5,4,0,0,16,17,5,1,0,0,17,18,3,4,2,0,18,19,
		5,6,0,0,19,20,6,1,-1,0,20,23,1,0,0,0,21,23,5,6,0,0,22,11,1,0,0,0,22,15,
		1,0,0,0,22,21,1,0,0,0,23,3,1,0,0,0,24,25,6,2,-1,0,25,26,5,5,0,0,26,35,
		6,2,-1,0,27,28,5,4,0,0,28,35,6,2,-1,0,29,30,5,2,0,0,30,31,3,4,2,0,31,32,
		5,3,0,0,32,33,6,2,-1,0,33,35,1,0,0,0,34,24,1,0,0,0,34,27,1,0,0,0,34,29,
		1,0,0,0,35,48,1,0,0,0,36,37,10,5,0,0,37,38,7,0,0,0,38,39,3,4,2,6,39,40,
		6,2,-1,0,40,47,1,0,0,0,41,42,10,4,0,0,42,43,7,1,0,0,43,44,3,4,2,5,44,45,
		6,2,-1,0,45,47,1,0,0,0,46,36,1,0,0,0,46,41,1,0,0,0,47,50,1,0,0,0,48,46,
		1,0,0,0,48,49,1,0,0,0,49,5,1,0,0,0,50,48,1,0,0,0,5,9,22,34,46,48
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
