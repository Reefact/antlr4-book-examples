//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Java.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, HexLiteral=90, DecimalLiteral=91, OctalLiteral=92, 
		FloatingPointLiteral=93, CharacterLiteral=94, StringLiteral=95, ENUM=96, 
		ASSERT=97, Identifier=98, COMMENT=99, WS=100, LINE_COMMENT=101;
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_classDeclaration = 4, RULE_enumDeclaration = 5, 
		RULE_interfaceDeclaration = 6, RULE_classOrInterfaceModifier = 7, RULE_modifiers = 8, 
		RULE_typeParameters = 9, RULE_typeParameter = 10, RULE_typeBound = 11, 
		RULE_enumBody = 12, RULE_enumConstants = 13, RULE_enumConstant = 14, RULE_enumBodyDeclarations = 15, 
		RULE_normalInterfaceDeclaration = 16, RULE_typeList = 17, RULE_classBody = 18, 
		RULE_interfaceBody = 19, RULE_classBodyDeclaration = 20, RULE_member = 21, 
		RULE_methodDeclaration = 22, RULE_methodDeclarationRest = 23, RULE_genericMethodDeclaration = 24, 
		RULE_fieldDeclaration = 25, RULE_constructorDeclaration = 26, RULE_interfaceBodyDeclaration = 27, 
		RULE_interfaceMemberDecl = 28, RULE_interfaceMethodOrFieldDecl = 29, RULE_interfaceMethodOrFieldRest = 30, 
		RULE_voidMethodDeclaratorRest = 31, RULE_interfaceMethodDeclaratorRest = 32, 
		RULE_interfaceGenericMethodDecl = 33, RULE_voidInterfaceMethodDeclaratorRest = 34, 
		RULE_constantDeclarator = 35, RULE_variableDeclarators = 36, RULE_variableDeclarator = 37, 
		RULE_constantDeclaratorsRest = 38, RULE_constantDeclaratorRest = 39, RULE_variableDeclaratorId = 40, 
		RULE_variableInitializer = 41, RULE_arrayInitializer = 42, RULE_modifier = 43, 
		RULE_packageOrTypeName = 44, RULE_enumConstantName = 45, RULE_typeName = 46, 
		RULE_type = 47, RULE_classOrInterfaceType = 48, RULE_primitiveType = 49, 
		RULE_variableModifier = 50, RULE_typeArguments = 51, RULE_typeArgument = 52, 
		RULE_qualifiedNameList = 53, RULE_formalParameters = 54, RULE_formalParameterDecls = 55, 
		RULE_formalParameterDeclsRest = 56, RULE_methodBody = 57, RULE_constructorBody = 58, 
		RULE_explicitConstructorInvocation = 59, RULE_qualifiedName = 60, RULE_literal = 61, 
		RULE_integerLiteral = 62, RULE_booleanLiteral = 63, RULE_annotations = 64, 
		RULE_annotation = 65, RULE_annotationName = 66, RULE_elementValuePairs = 67, 
		RULE_elementValuePair = 68, RULE_elementValue = 69, RULE_elementValueArrayInitializer = 70, 
		RULE_annotationTypeDeclaration = 71, RULE_annotationTypeBody = 72, RULE_annotationTypeElementDeclaration = 73, 
		RULE_annotationTypeElementRest = 74, RULE_annotationMethodOrConstantRest = 75, 
		RULE_annotationMethodRest = 76, RULE_annotationConstantRest = 77, RULE_defaultValue = 78, 
		RULE_block = 79, RULE_blockStatement = 80, RULE_localVariableDeclarationStatement = 81, 
		RULE_localVariableDeclaration = 82, RULE_variableModifiers = 83, RULE_statement = 84, 
		RULE_catches = 85, RULE_catchClause = 86, RULE_formalParameter = 87, RULE_switchBlock = 88, 
		RULE_switchBlockStatementGroup = 89, RULE_switchLabel = 90, RULE_forControl = 91, 
		RULE_forInit = 92, RULE_enhancedForControl = 93, RULE_forUpdate = 94, 
		RULE_parExpression = 95, RULE_expressionList = 96, RULE_statementExpression = 97, 
		RULE_constantExpression = 98, RULE_expression = 99, RULE_primary = 100, 
		RULE_creator = 101, RULE_createdName = 102, RULE_innerCreator = 103, RULE_explicitGenericInvocation = 104, 
		RULE_arrayCreatorRest = 105, RULE_classCreatorRest = 106, RULE_nonWildcardTypeArguments = 107, 
		RULE_arguments = 108;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"classDeclaration", "enumDeclaration", "interfaceDeclaration", "classOrInterfaceModifier", 
		"modifiers", "typeParameters", "typeParameter", "typeBound", "enumBody", 
		"enumConstants", "enumConstant", "enumBodyDeclarations", "normalInterfaceDeclaration", 
		"typeList", "classBody", "interfaceBody", "classBodyDeclaration", "member", 
		"methodDeclaration", "methodDeclarationRest", "genericMethodDeclaration", 
		"fieldDeclaration", "constructorDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDecl", "interfaceMethodOrFieldDecl", "interfaceMethodOrFieldRest", 
		"voidMethodDeclaratorRest", "interfaceMethodDeclaratorRest", "interfaceGenericMethodDecl", 
		"voidInterfaceMethodDeclaratorRest", "constantDeclarator", "variableDeclarators", 
		"variableDeclarator", "constantDeclaratorsRest", "constantDeclaratorRest", 
		"variableDeclaratorId", "variableInitializer", "arrayInitializer", "modifier", 
		"packageOrTypeName", "enumConstantName", "typeName", "type", "classOrInterfaceType", 
		"primitiveType", "variableModifier", "typeArguments", "typeArgument", 
		"qualifiedNameList", "formalParameters", "formalParameterDecls", "formalParameterDeclsRest", 
		"methodBody", "constructorBody", "explicitConstructorInvocation", "qualifiedName", 
		"literal", "integerLiteral", "booleanLiteral", "annotations", "annotation", 
		"annotationName", "elementValuePairs", "elementValuePair", "elementValue", 
		"elementValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeElementDeclaration", "annotationTypeElementRest", "annotationMethodOrConstantRest", 
		"annotationMethodRest", "annotationConstantRest", "defaultValue", "block", 
		"blockStatement", "localVariableDeclarationStatement", "localVariableDeclaration", 
		"variableModifiers", "statement", "catches", "catchClause", "formalParameter", 
		"switchBlock", "switchBlockStatementGroup", "switchLabel", "forControl", 
		"forInit", "enhancedForControl", "forUpdate", "parExpression", "expressionList", 
		"statementExpression", "constantExpression", "expression", "primary", 
		"creator", "createdName", "innerCreator", "explicitGenericInvocation", 
		"arrayCreatorRest", "classCreatorRest", "nonWildcardTypeArguments", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", 
		"'extends'", "'implements'", "'public'", "'protected'", "'private'", "'abstract'", 
		"'final'", "'strictfp'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", 
		"'['", "']'", "'void'", "'throws'", "'='", "'native'", "'synchronized'", 
		"'transient'", "'volatile'", "'boolean'", "'char'", "'byte'", "'short'", 
		"'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", 
		"'...'", "'this'", "'null'", "'true'", "'false'", "'@'", "'default'", 
		"':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", 
		"'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", 
		"'case'", "'new'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", 
		"'%'", "'instanceof'", "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'^='", 
		"'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'%='", null, null, null, 
		null, null, null, "'enum'", "'assert'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "HexLiteral", "DecimalLiteral", "OctalLiteral", 
		"FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "ENUM", "ASSERT", 
		"Identifier", "COMMENT", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 218;
				packageDeclaration();
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 221;
				importDeclaration();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 562949957680276L) != 0 || _la==ENUM) {
				{
				{
				State = 227;
				typeDeclaration();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(T__0);
			State = 236;
			qualifiedName();
			State = 237;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(T__2);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 240;
				Match(T__3);
				}
			}

			State = 243;
			qualifiedName();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 244;
				Match(T__4);
				State = 245;
				Match(T__5);
				}
			}

			State = 248;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			int _alt;
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__6:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__21:
			case T__48:
			case ENUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 250;
						classOrInterfaceModifier();
						}
						} 
					}
					State = 255;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 259;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 256;
					classDeclaration();
					}
					break;
				case T__21:
				case T__48:
					{
					State = 257;
					interfaceDeclaration();
					}
					break;
				case ENUM:
					{
					State = 258;
					enumDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__6);
			State = 265;
			Match(Identifier);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 266;
				typeParameters();
				}
			}

			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 269;
				Match(T__7);
				State = 270;
				type();
				}
			}

			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 273;
				Match(T__8);
				State = 274;
				typeList();
				}
			}

			State = 277;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(JavaParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(ENUM);
			State = 280;
			Match(Identifier);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 281;
				Match(T__8);
				State = 282;
				typeList();
				}
			}

			State = 285;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_interfaceDeclaration);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				normalInterfaceDeclaration();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				annotationTypeDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_classOrInterfaceModifier);
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__48:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				annotation();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 293;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 294;
				Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 295;
				Match(T__12);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 6);
				{
				State = 296;
				Match(T__3);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 7);
				{
				State = 297;
				Match(T__13);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 8);
				{
				State = 298;
				Match(T__14);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 16, RULE_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 301;
					modifier();
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__15);
			State = 308;
			typeParameter();
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 309;
				Match(T__16);
				State = 310;
				typeParameter();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(Identifier);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 319;
				Match(T__7);
				State = 320;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			type();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 324;
				Match(T__18);
				State = 325;
				type();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(T__19);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__48 || _la==Identifier) {
				{
				State = 332;
				enumConstants();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 335;
				Match(T__16);
				}
			}

			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 338;
				enumBodyDeclarations();
				}
			}

			State = 341;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			enumConstant();
			State = 348;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 344;
					Match(T__16);
					State = 345;
					enumConstant();
					}
					} 
				}
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__48) {
				{
				State = 351;
				annotations();
				}
			}

			State = 354;
			Match(Identifier);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 355;
				arguments();
				}
			}

			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 358;
				classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(T__1);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 564049235541140L) != 0 || _la==Identifier) {
				{
				{
				State = 362;
				classBodyDeclaration();
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(T__21);
			State = 369;
			Match(Identifier);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 370;
				typeParameters();
				}
			}

			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 373;
				Match(T__7);
				State = 374;
				typeList();
				}
			}

			State = 377;
			interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			type();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 380;
				Match(T__16);
				State = 381;
				type();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(T__19);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 564049235541140L) != 0 || _la==Identifier) {
				{
				{
				State = 388;
				classBodyDeclaration();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(T__19);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 564049234492564L) != 0 || _la==Identifier) {
				{
				{
				State = 397;
				interfaceBodyDeclaration();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 403;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_classBodyDeclaration);
		int _la;
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 406;
					Match(T__3);
					}
				}

				State = 409;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				modifiers();
				State = 411;
				member();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_member);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				genericMethodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417;
				fieldDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418;
				constructorDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419;
				interfaceDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 420;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationRestContext methodDeclarationRest() {
			return GetRuleContext<MethodDeclarationRestContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodDeclaration);
		int _la;
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				type();
				State = 424;
				Match(Identifier);
				State = 425;
				formalParameters();
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__22) {
					{
					{
					State = 426;
					Match(T__22);
					State = 427;
					Match(T__23);
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 433;
				methodDeclarationRest();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				Match(T__24);
				State = 436;
				Match(Identifier);
				State = 437;
				formalParameters();
				State = 438;
				methodDeclarationRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarationRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMethodDeclarationRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMethodDeclarationRest(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationRestContext methodDeclarationRest() {
		MethodDeclarationRestContext _localctx = new MethodDeclarationRestContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodDeclarationRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 442;
				Match(T__25);
				State = 443;
				qualifiedNameList();
				}
			}

			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 446;
				methodBody();
				}
				break;
			case T__1:
				{
				State = 447;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			typeParameters();
			State = 451;
			methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			type();
			State = 454;
			variableDeclarators();
			State = 455;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 457;
				typeParameters();
				}
			}

			State = 460;
			Match(Identifier);
			State = 461;
			formalParameters();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 462;
				Match(T__25);
				State = 463;
				qualifiedNameList();
				}
			}

			State = 466;
			constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclContext interfaceMemberDecl() {
			return GetRuleContext<InterfaceMemberDeclContext>(0);
		}
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_interfaceBodyDeclaration);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__6:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__21:
			case T__24:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__48:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468;
				modifiers();
				State = 469;
				interfaceMemberDecl();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodOrFieldDeclContext interfaceMethodOrFieldDecl() {
			return GetRuleContext<InterfaceMethodOrFieldDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceGenericMethodDeclContext interfaceGenericMethodDecl() {
			return GetRuleContext<InterfaceGenericMethodDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VoidInterfaceMethodDeclaratorRestContext voidInterfaceMethodDeclaratorRest() {
			return GetRuleContext<VoidInterfaceMethodDeclaratorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceMemberDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDecl(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclContext interfaceMemberDecl() {
		InterfaceMemberDeclContext _localctx = new InterfaceMemberDeclContext(Context, State);
		EnterRule(_localctx, 56, RULE_interfaceMemberDecl);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				interfaceMethodOrFieldDecl();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				interfaceGenericMethodDecl();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476;
				Match(T__24);
				State = 477;
				Match(Identifier);
				State = 478;
				voidInterfaceMethodDeclaratorRest();
				}
				break;
			case T__21:
			case T__48:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				interfaceDeclaration();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480;
				classDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodOrFieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodOrFieldRestContext interfaceMethodOrFieldRest() {
			return GetRuleContext<InterfaceMethodOrFieldRestContext>(0);
		}
		public InterfaceMethodOrFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodOrFieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodOrFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodOrFieldDecl(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodOrFieldDeclContext interfaceMethodOrFieldDecl() {
		InterfaceMethodOrFieldDeclContext _localctx = new InterfaceMethodOrFieldDeclContext(Context, State);
		EnterRule(_localctx, 58, RULE_interfaceMethodOrFieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			type();
			State = 484;
			Match(Identifier);
			State = 485;
			interfaceMethodOrFieldRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodOrFieldRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorsRestContext constantDeclaratorsRest() {
			return GetRuleContext<ConstantDeclaratorsRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclaratorRestContext interfaceMethodDeclaratorRest() {
			return GetRuleContext<InterfaceMethodDeclaratorRestContext>(0);
		}
		public InterfaceMethodOrFieldRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodOrFieldRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodOrFieldRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodOrFieldRest(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodOrFieldRestContext interfaceMethodOrFieldRest() {
		InterfaceMethodOrFieldRestContext _localctx = new InterfaceMethodOrFieldRestContext(Context, State);
		EnterRule(_localctx, 60, RULE_interfaceMethodOrFieldRest);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				constantDeclaratorsRest();
				State = 488;
				Match(T__1);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				interfaceMethodDeclaratorRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidMethodDeclaratorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public VoidMethodDeclaratorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidMethodDeclaratorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVoidMethodDeclaratorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVoidMethodDeclaratorRest(this);
		}
	}

	[RuleVersion(0)]
	public VoidMethodDeclaratorRestContext voidMethodDeclaratorRest() {
		VoidMethodDeclaratorRestContext _localctx = new VoidMethodDeclaratorRestContext(Context, State);
		EnterRule(_localctx, 62, RULE_voidMethodDeclaratorRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			formalParameters();
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 494;
				Match(T__25);
				State = 495;
				qualifiedNameList();
				}
			}

			State = 500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 498;
				methodBody();
				}
				break;
			case T__1:
				{
				State = 499;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclaratorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public InterfaceMethodDeclaratorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaratorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaratorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaratorRest(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclaratorRestContext interfaceMethodDeclaratorRest() {
		InterfaceMethodDeclaratorRestContext _localctx = new InterfaceMethodDeclaratorRestContext(Context, State);
		EnterRule(_localctx, 64, RULE_interfaceMethodDeclaratorRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			formalParameters();
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 503;
				Match(T__22);
				State = 504;
				Match(T__23);
				}
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 510;
				Match(T__25);
				State = 511;
				qualifiedNameList();
				}
			}

			State = 514;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceGenericMethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclaratorRestContext interfaceMethodDeclaratorRest() {
			return GetRuleContext<InterfaceMethodDeclaratorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public InterfaceGenericMethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceGenericMethodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceGenericMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceGenericMethodDecl(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceGenericMethodDeclContext interfaceGenericMethodDecl() {
		InterfaceGenericMethodDeclContext _localctx = new InterfaceGenericMethodDeclContext(Context, State);
		EnterRule(_localctx, 66, RULE_interfaceGenericMethodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			typeParameters();
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				{
				State = 517;
				type();
				}
				break;
			case T__24:
				{
				State = 518;
				Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 521;
			Match(Identifier);
			State = 522;
			interfaceMethodDeclaratorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidInterfaceMethodDeclaratorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public VoidInterfaceMethodDeclaratorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidInterfaceMethodDeclaratorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVoidInterfaceMethodDeclaratorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVoidInterfaceMethodDeclaratorRest(this);
		}
	}

	[RuleVersion(0)]
	public VoidInterfaceMethodDeclaratorRestContext voidInterfaceMethodDeclaratorRest() {
		VoidInterfaceMethodDeclaratorRestContext _localctx = new VoidInterfaceMethodDeclaratorRestContext(Context, State);
		EnterRule(_localctx, 68, RULE_voidInterfaceMethodDeclaratorRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			formalParameters();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 525;
				Match(T__25);
				State = 526;
				qualifiedNameList();
				}
			}

			State = 529;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorRestContext constantDeclaratorRest() {
			return GetRuleContext<ConstantDeclaratorRestContext>(0);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_constantDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(Identifier);
			State = 532;
			constantDeclaratorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			variableDeclarator();
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 535;
				Match(T__16);
				State = 536;
				variableDeclarator();
				}
				}
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			variableDeclaratorId();
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 543;
				Match(T__26);
				State = 544;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorsRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorRestContext constantDeclaratorRest() {
			return GetRuleContext<ConstantDeclaratorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		public ConstantDeclaratorsRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaratorsRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantDeclaratorsRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantDeclaratorsRest(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorsRestContext constantDeclaratorsRest() {
		ConstantDeclaratorsRestContext _localctx = new ConstantDeclaratorsRestContext(Context, State);
		EnterRule(_localctx, 76, RULE_constantDeclaratorsRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			constantDeclaratorRest();
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 548;
				Match(T__16);
				State = 549;
				constantDeclarator();
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public ConstantDeclaratorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaratorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantDeclaratorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantDeclaratorRest(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorRestContext constantDeclaratorRest() {
		ConstantDeclaratorRestContext _localctx = new ConstantDeclaratorRestContext(Context, State);
		EnterRule(_localctx, 78, RULE_constantDeclaratorRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 555;
				Match(T__22);
				State = 556;
				Match(T__23);
				}
				}
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 562;
			Match(T__26);
			State = 563;
			variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 80, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(Identifier);
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 566;
				Match(T__22);
				State = 567;
				Match(T__23);
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_variableInitializer);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573;
				arrayInitializer();
				}
				break;
			case T__24:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__40:
			case T__41:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case HexLiteral:
			case DecimalLiteral:
			case OctalLiteral:
			case FloatingPointLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 84, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(T__19);
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457902362624L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
				{
				State = 578;
				variableInitializer();
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 579;
						Match(T__16);
						State = 580;
						variableInitializer();
						}
						} 
					}
					State = 585;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 586;
					Match(T__16);
					}
				}

				}
			}

			State = 591;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_modifier);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__48:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593;
				annotation();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 596;
				Match(T__11);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 5);
				{
				State = 597;
				Match(T__3);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 598;
				Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 7);
				{
				State = 599;
				Match(T__13);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 8);
				{
				State = 600;
				Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 9);
				{
				State = 601;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 10);
				{
				State = 602;
				Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 11);
				{
				State = 603;
				Match(T__30);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 12);
				{
				State = 604;
				Match(T__14);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_packageOrTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_type);
		try {
			int _alt;
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 613;
				classOrInterfaceType();
				State = 618;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 614;
						Match(T__22);
						State = 615;
						Match(T__23);
						}
						} 
					}
					State = 620;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				}
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				primitiveType();
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 622;
						Match(T__22);
						State = 623;
						Match(T__23);
						}
						} 
					}
					State = 628;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(Identifier);
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 632;
				typeArguments();
				}
				break;
			}
			State = 642;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 635;
					Match(T__4);
					State = 636;
					Match(Identifier);
					State = 638;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						State = 637;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1095216660480L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 100, RULE_variableModifier);
		try {
			State = 649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647;
				Match(T__13);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648;
				annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(T__15);
			State = 652;
			typeArgument();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 653;
				Match(T__16);
				State = 654;
				typeArgument();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeArgument);
		int _la;
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662;
				type();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663;
				Match(T__39);
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7 || _la==T__40) {
					{
					State = 664;
					_la = TokenStream.LA(1);
					if ( !(_la==T__7 || _la==T__40) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 665;
					type();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 106, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			qualifiedName();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 671;
				Match(T__16);
				State = 672;
				qualifiedName();
				}
				}
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterDeclsContext formalParameterDecls() {
			return GetRuleContext<FormalParameterDeclsContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 108, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(T__41);
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 564045170098176L) != 0 || _la==Identifier) {
				{
				State = 679;
				formalParameterDecls();
				}
			}

			State = 682;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifiersContext variableModifiers() {
			return GetRuleContext<VariableModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterDeclsRestContext formalParameterDeclsRest() {
			return GetRuleContext<FormalParameterDeclsRestContext>(0);
		}
		public FormalParameterDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameterDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameterDecls(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterDeclsContext formalParameterDecls() {
		FormalParameterDeclsContext _localctx = new FormalParameterDeclsContext(Context, State);
		EnterRule(_localctx, 110, RULE_formalParameterDecls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			variableModifiers();
			State = 685;
			type();
			State = 686;
			formalParameterDeclsRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterDeclsRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterDeclsContext formalParameterDecls() {
			return GetRuleContext<FormalParameterDeclsContext>(0);
		}
		public FormalParameterDeclsRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterDeclsRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameterDeclsRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameterDeclsRest(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterDeclsRestContext formalParameterDeclsRest() {
		FormalParameterDeclsRestContext _localctx = new FormalParameterDeclsRestContext(Context, State);
		EnterRule(_localctx, 112, RULE_formalParameterDeclsRest);
		int _la;
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688;
				variableDeclaratorId();
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 689;
					Match(T__16);
					State = 690;
					formalParameterDecls();
					}
				}

				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693;
				Match(T__43);
				State = 694;
				variableDeclaratorId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 114, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(Context, State);
		EnterRule(_localctx, 116, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(T__19);
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 700;
				explicitConstructorInvocation();
				}
				break;
			}
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & -300642766636957564L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7499415679L) != 0) {
				{
				{
				State = 703;
				blockStatement();
				}
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 709;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 118, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 711;
					nonWildcardTypeArguments();
					}
				}

				State = 714;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__44) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 715;
				arguments();
				State = 716;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				primary();
				State = 719;
				Match(T__4);
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 720;
					nonWildcardTypeArguments();
					}
				}

				State = 723;
				Match(T__40);
				State = 724;
				arguments();
				State = 725;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 120, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(Identifier);
			State = 734;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 730;
					Match(T__4);
					State = 731;
					Match(Identifier);
					}
					} 
				}
				State = 736;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPointLiteral() { return GetToken(JavaParser.FloatingPointLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(JavaParser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_literal);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HexLiteral:
			case DecimalLiteral:
			case OctalLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				integerLiteral();
				}
				break;
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				Match(FloatingPointLiteral);
				}
				break;
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 739;
				Match(CharacterLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 740;
				Match(StringLiteral);
				}
				break;
			case T__46:
			case T__47:
				EnterOuterAlt(_localctx, 5);
				{
				State = 741;
				booleanLiteral();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 6);
				{
				State = 742;
				Match(T__45);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(JavaParser.HexLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalLiteral() { return GetToken(JavaParser.OctalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(JavaParser.DecimalLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 124, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_la = TokenStream.LA(1);
			if ( !((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 7L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			_la = TokenStream.LA(1);
			if ( !(_la==T__46 || _la==T__47) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 749;
				annotation();
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__48 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(T__48);
			State = 755;
			annotationName();
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 756;
				Match(T__41);
				State = 759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 757;
					elementValuePairs();
					}
					break;
				case 2:
					{
					State = 758;
					elementValue();
					}
					break;
				}
				State = 761;
				Match(T__42);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(Identifier);
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 765;
				Match(T__4);
				State = 766;
				Match(Identifier);
				}
				}
				State = 771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValuePairs(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(Context, State);
		EnterRule(_localctx, 134, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			elementValuePair();
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 773;
				Match(T__16);
				State = 774;
				elementValuePair();
				}
				}
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 136, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(Identifier);
			State = 781;
			Match(T__26);
			State = 782;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 138, RULE_elementValue);
		try {
			State = 787;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__40:
			case T__41:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case HexLiteral:
			case DecimalLiteral:
			case OctalLiteral:
			case FloatingPointLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				expression(0);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				annotation();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 786;
				elementValueArrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 140, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			Match(T__19);
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098407855783936L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
				{
				State = 790;
				elementValue();
				State = 795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 791;
						Match(T__16);
						State = 792;
						elementValue();
						}
						} 
					}
					State = 797;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				}
				}
			}

			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 800;
				Match(T__16);
				}
			}

			State = 803;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(T__48);
			State = 806;
			Match(T__21);
			State = 807;
			Match(Identifier);
			State = 808;
			annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 144, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(T__19);
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 564049200872592L) != 0 || _la==ENUM || _la==Identifier) {
				{
				{
				State = 811;
				annotationTypeElementDeclaration();
				}
				}
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 817;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_annotationTypeElementDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			modifiers();
			State = 820;
			annotationTypeElementRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(Context, State);
		EnterRule(_localctx, 148, RULE_annotationTypeElementRest);
		int _la;
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822;
				type();
				State = 823;
				annotationMethodOrConstantRest();
				State = 824;
				Match(T__1);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 826;
				classDeclaration();
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 827;
					Match(T__1);
					}
				}

				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830;
				normalInterfaceDeclaration();
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 831;
					Match(T__1);
					}
				}

				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 834;
				enumDeclaration();
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 835;
					Match(T__1);
					}
				}

				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 5);
				{
				State = 838;
				annotationTypeDeclaration();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 839;
					Match(T__1);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(Context, State);
		EnterRule(_localctx, 150, RULE_annotationMethodOrConstantRest);
		try {
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844;
				annotationMethodRest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845;
				annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodRest(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(Context, State);
		EnterRule(_localctx, 152, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			Match(Identifier);
			State = 849;
			Match(T__41);
			State = 850;
			Match(T__42);
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__49) {
				{
				State = 851;
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationConstantRest(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(Context, State);
		EnterRule(_localctx, 154, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 156, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(T__49);
			State = 857;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 158, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(T__19);
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & -300642766636957564L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7499415679L) != 0) {
				{
				{
				State = 860;
				blockStatement();
				}
				}
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 866;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_blockStatement);
		try {
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				localVariableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869;
				classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870;
				interfaceDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 871;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			localVariableDeclaration();
			State = 875;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifiersContext variableModifiers() {
			return GetRuleContext<VariableModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 164, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			variableModifiers();
			State = 878;
			type();
			State = 879;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public VariableModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifiersContext variableModifiers() {
		VariableModifiersContext _localctx = new VariableModifiersContext(Context, State);
		EnterRule(_localctx, 166, RULE_variableModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==T__48) {
				{
				{
				State = 881;
				variableModifier();
				}
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(JavaParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_statement);
		int _la;
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888;
				Match(ASSERT);
				State = 889;
				expression(0);
				State = 892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50) {
					{
					State = 890;
					Match(T__50);
					State = 891;
					expression(0);
					}
				}

				State = 894;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 896;
				Match(T__51);
				State = 897;
				parExpression();
				State = 898;
				statement();
				State = 901;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 899;
					Match(T__52);
					State = 900;
					statement();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 903;
				Match(T__53);
				State = 904;
				Match(T__41);
				State = 905;
				forControl();
				State = 906;
				Match(T__42);
				State = 907;
				statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 909;
				Match(T__54);
				State = 910;
				parExpression();
				State = 911;
				statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 913;
				Match(T__55);
				State = 914;
				statement();
				State = 915;
				Match(T__54);
				State = 916;
				parExpression();
				State = 917;
				Match(T__1);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 919;
				Match(T__56);
				State = 920;
				block();
				State = 928;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 921;
					catches();
					State = 922;
					Match(T__57);
					State = 923;
					block();
					}
					break;
				case 2:
					{
					State = 925;
					catches();
					}
					break;
				case 3:
					{
					State = 926;
					Match(T__57);
					State = 927;
					block();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 930;
				Match(T__58);
				State = 931;
				parExpression();
				State = 932;
				switchBlock();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 934;
				Match(T__28);
				State = 935;
				parExpression();
				State = 936;
				block();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 938;
				Match(T__59);
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
					{
					State = 939;
					expression(0);
					}
				}

				State = 942;
				Match(T__1);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 943;
				Match(T__60);
				State = 944;
				expression(0);
				State = 945;
				Match(T__1);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 947;
				Match(T__61);
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 948;
					Match(Identifier);
					}
				}

				State = 951;
				Match(T__1);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 952;
				Match(T__62);
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 953;
					Match(Identifier);
					}
				}

				State = 956;
				Match(T__1);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 957;
				Match(T__1);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 958;
				statementExpression();
				State = 959;
				Match(T__1);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 961;
				Match(Identifier);
				State = 962;
				Match(T__50);
				State = 963;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(Context, State);
		EnterRule(_localctx, 170, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			catchClause();
			State = 970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__63) {
				{
				{
				State = 967;
				catchClause();
				}
				}
				State = 972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(T__63);
			State = 974;
			Match(T__41);
			State = 975;
			formalParameter();
			State = 976;
			Match(T__42);
			State = 977;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifiersContext variableModifiers() {
			return GetRuleContext<VariableModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 174, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			variableModifiers();
			State = 980;
			type();
			State = 981;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 176, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			Match(T__19);
			State = 987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 984;
					switchBlockStatementGroup();
					}
					} 
				}
				State = 989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__49 || _la==T__64) {
				{
				{
				State = 990;
				switchLabel();
				}
				}
				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 996;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 178, RULE_switchBlockStatementGroup);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 998;
					switchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & -300642766636957564L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7499415679L) != 0) {
				{
				{
				State = 1003;
				blockStatement();
				}
				}
				State = 1008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 180, RULE_switchLabel);
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009;
				Match(T__64);
				State = 1010;
				constantExpression();
				State = 1011;
				Match(T__50);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				Match(T__64);
				State = 1014;
				enumConstantName();
				State = 1015;
				Match(T__50);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1017;
				Match(T__49);
				State = 1018;
				Match(T__50);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 182, RULE_forControl);
		int _la;
		try {
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1021;
				enhancedForControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098407854751744L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
					{
					State = 1022;
					forInit();
					}
				}

				State = 1025;
				Match(T__1);
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
					{
					State = 1026;
					expression(0);
					}
				}

				State = 1029;
				Match(T__1);
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
					{
					State = 1030;
					forUpdate();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 184, RULE_forInit);
		try {
			State = 1037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1035;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1036;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifiersContext variableModifiers() {
			return GetRuleContext<VariableModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 186, RULE_enhancedForControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			variableModifiers();
			State = 1040;
			type();
			State = 1041;
			Match(Identifier);
			State = 1042;
			Match(T__50);
			State = 1043;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 188, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 190, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			Match(T__41);
			State = 1048;
			expression(0);
			State = 1049;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 192, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			expression(0);
			State = 1056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 1052;
				Match(T__16);
				State = 1053;
				expression(0);
				}
				}
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 196, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 198;
		EnterRecursionRule(_localctx, 198, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1064;
				primary();
				}
				break;
			case 2:
				{
				State = 1065;
				_la = TokenStream.LA(1);
				if ( !((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 15L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1066;
				expression(17);
				}
				break;
			case 3:
				{
				State = 1067;
				_la = TokenStream.LA(1);
				if ( !(_la==T__70 || _la==T__71) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1068;
				expression(16);
				}
				break;
			case 4:
				{
				State = 1069;
				Match(T__41);
				State = 1070;
				type();
				State = 1071;
				Match(T__42);
				State = 1072;
				expression(15);
				}
				break;
			case 5:
				{
				State = 1074;
				Match(T__65);
				State = 1075;
				creator();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1202;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1078;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1079;
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__72 || _la==T__73) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1080;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1081;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1082;
						_la = TokenStream.LA(1);
						if ( !(_la==T__68 || _la==T__69) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1083;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1084;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1092;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
						case 1:
							{
							State = 1085;
							Match(T__15);
							State = 1086;
							Match(T__15);
							}
							break;
						case 2:
							{
							State = 1087;
							Match(T__17);
							State = 1088;
							Match(T__17);
							State = 1089;
							Match(T__17);
							}
							break;
						case 3:
							{
							State = 1090;
							Match(T__17);
							State = 1091;
							Match(T__17);
							}
							break;
						}
						State = 1094;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1095;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1102;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
						case 1:
							{
							State = 1096;
							Match(T__15);
							State = 1097;
							Match(T__26);
							}
							break;
						case 2:
							{
							State = 1098;
							Match(T__17);
							State = 1099;
							Match(T__26);
							}
							break;
						case 3:
							{
							State = 1100;
							Match(T__17);
							}
							break;
						case 4:
							{
							State = 1101;
							Match(T__15);
							}
							break;
						}
						State = 1104;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1105;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1106;
						_la = TokenStream.LA(1);
						if ( !(_la==T__75 || _la==T__76) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1107;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1108;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1109;
						Match(T__18);
						State = 1110;
						expression(8);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1111;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1112;
						Match(T__77);
						State = 1113;
						expression(7);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1114;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1115;
						Match(T__78);
						State = 1116;
						expression(6);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1117;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1118;
						Match(T__79);
						State = 1119;
						expression(5);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1120;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1121;
						Match(T__80);
						State = 1122;
						expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1123;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1124;
						Match(T__39);
						State = 1125;
						expression(0);
						State = 1126;
						Match(T__50);
						State = 1127;
						expression(3);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1129;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1149;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
						case 1:
							{
							State = 1130;
							Match(T__81);
							}
							break;
						case 2:
							{
							State = 1131;
							Match(T__82);
							}
							break;
						case 3:
							{
							State = 1132;
							Match(T__83);
							}
							break;
						case 4:
							{
							State = 1133;
							Match(T__84);
							}
							break;
						case 5:
							{
							State = 1134;
							Match(T__85);
							}
							break;
						case 6:
							{
							State = 1135;
							Match(T__86);
							}
							break;
						case 7:
							{
							State = 1136;
							Match(T__87);
							}
							break;
						case 8:
							{
							State = 1137;
							Match(T__26);
							}
							break;
						case 9:
							{
							State = 1138;
							Match(T__17);
							State = 1139;
							Match(T__17);
							State = 1140;
							Match(T__26);
							}
							break;
						case 10:
							{
							State = 1141;
							Match(T__17);
							State = 1142;
							Match(T__17);
							State = 1143;
							Match(T__17);
							State = 1144;
							Match(T__26);
							}
							break;
						case 11:
							{
							State = 1145;
							Match(T__15);
							State = 1146;
							Match(T__15);
							State = 1147;
							Match(T__26);
							}
							break;
						case 12:
							{
							State = 1148;
							Match(T__88);
							}
							break;
						}
						State = 1151;
						expression(2);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1152;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1153;
						Match(T__4);
						State = 1154;
						Match(Identifier);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1155;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1156;
						Match(T__4);
						State = 1157;
						Match(T__44);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1158;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1159;
						Match(T__4);
						State = 1160;
						Match(T__40);
						State = 1161;
						Match(T__41);
						State = 1163;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
							{
							State = 1162;
							expressionList();
							}
						}

						State = 1165;
						Match(T__42);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1166;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1167;
						Match(T__4);
						State = 1168;
						Match(T__65);
						State = 1169;
						Match(Identifier);
						State = 1170;
						Match(T__41);
						State = 1172;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
							{
							State = 1171;
							expressionList();
							}
						}

						State = 1174;
						Match(T__42);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1175;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1176;
						Match(T__4);
						State = 1177;
						Match(T__40);
						State = 1178;
						Match(T__4);
						State = 1179;
						Match(Identifier);
						State = 1181;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
						case 1:
							{
							State = 1180;
							arguments();
							}
							break;
						}
						}
						break;
					case 18:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1183;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1184;
						Match(T__4);
						State = 1185;
						explicitGenericInvocation();
						}
						break;
					case 19:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1186;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1187;
						Match(T__22);
						State = 1188;
						expression(0);
						State = 1189;
						Match(T__23);
						}
						break;
					case 20:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1191;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1192;
						Match(T__41);
						State = 1194;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
							{
							State = 1193;
							expressionList();
							}
						}

						State = 1196;
						Match(T__42);
						}
						break;
					case 21:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1197;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1198;
						_la = TokenStream.LA(1);
						if ( !(_la==T__66 || _la==T__67) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 22:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1199;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1200;
						Match(T__74);
						State = 1201;
						type();
						}
						break;
					}
					} 
				}
				State = 1206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 200, RULE_primary);
		try {
			State = 1222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1207;
				Match(T__41);
				State = 1208;
				expression(0);
				State = 1209;
				Match(T__42);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1211;
				Match(T__44);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1212;
				Match(T__40);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1213;
				literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1214;
				Match(Identifier);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1215;
				type();
				State = 1216;
				Match(T__4);
				State = 1217;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1219;
				Match(T__24);
				State = 1220;
				Match(T__4);
				State = 1221;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 202, RULE_creator);
		try {
			State = 1233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1224;
				nonWildcardTypeArguments();
				State = 1225;
				createdName();
				State = 1226;
				classCreatorRest();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1228;
				createdName();
				State = 1231;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__22:
					{
					State = 1229;
					arrayCreatorRest();
					}
					break;
				case T__41:
					{
					State = 1230;
					classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 204, RULE_createdName);
		try {
			State = 1237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1235;
				classOrInterfaceType();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1236;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 206, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 1239;
				nonWildcardTypeArguments();
				}
			}

			State = 1242;
			Match(Identifier);
			State = 1243;
			classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 208, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			nonWildcardTypeArguments();
			State = 1246;
			Match(Identifier);
			State = 1247;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 210, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			Match(T__22);
			State = 1277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 1250;
				Match(T__23);
				State = 1255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__22) {
					{
					{
					State = 1251;
					Match(T__22);
					State = 1252;
					Match(T__23);
					}
					}
					State = 1257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1258;
				arrayInitializer();
				}
				break;
			case T__24:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__40:
			case T__41:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case HexLiteral:
			case DecimalLiteral:
			case OctalLiteral:
			case FloatingPointLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case Identifier:
				{
				State = 1259;
				expression(0);
				State = 1260;
				Match(T__23);
				State = 1267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1261;
						Match(T__22);
						State = 1262;
						expression(0);
						State = 1263;
						Match(T__23);
						}
						} 
					}
					State = 1269;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1270;
						Match(T__22);
						State = 1271;
						Match(T__23);
						}
						} 
					}
					State = 1276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 212, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			arguments();
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				State = 1280;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 214, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			Match(T__15);
			State = 1284;
			typeList();
			State = 1285;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 216, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			Match(T__41);
			State = 1289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 535457901314048L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 5351932031L) != 0) {
				{
				State = 1288;
				expressionList();
				}
			}

			State = 1291;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 99: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		case 12: return Precpred(Context, 26);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		case 18: return Precpred(Context, 20);
		case 19: return Precpred(Context, 19);
		case 20: return Precpred(Context, 18);
		case 21: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,101,1294,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,3,0,220,8,0,1,0,5,
		0,223,8,0,10,0,12,0,226,9,0,1,0,5,0,229,8,0,10,0,12,0,232,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,2,1,2,3,2,242,8,2,1,2,1,2,1,2,3,2,247,8,2,1,2,1,2,1,
		3,5,3,252,8,3,10,3,12,3,255,9,3,1,3,1,3,1,3,3,3,260,8,3,1,3,3,3,263,8,
		3,1,4,1,4,1,4,3,4,268,8,4,1,4,1,4,3,4,272,8,4,1,4,1,4,3,4,276,8,4,1,4,
		1,4,1,5,1,5,1,5,1,5,3,5,284,8,5,1,5,1,5,1,6,1,6,3,6,290,8,6,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,300,8,7,1,8,5,8,303,8,8,10,8,12,8,306,9,8,1,
		9,1,9,1,9,1,9,5,9,312,8,9,10,9,12,9,315,9,9,1,9,1,9,1,10,1,10,1,10,3,10,
		322,8,10,1,11,1,11,1,11,5,11,327,8,11,10,11,12,11,330,9,11,1,12,1,12,3,
		12,334,8,12,1,12,3,12,337,8,12,1,12,3,12,340,8,12,1,12,1,12,1,13,1,13,
		1,13,5,13,347,8,13,10,13,12,13,350,9,13,1,14,3,14,353,8,14,1,14,1,14,3,
		14,357,8,14,1,14,3,14,360,8,14,1,15,1,15,5,15,364,8,15,10,15,12,15,367,
		9,15,1,16,1,16,1,16,3,16,372,8,16,1,16,1,16,3,16,376,8,16,1,16,1,16,1,
		17,1,17,1,17,5,17,383,8,17,10,17,12,17,386,9,17,1,18,1,18,5,18,390,8,18,
		10,18,12,18,393,9,18,1,18,1,18,1,19,1,19,5,19,399,8,19,10,19,12,19,402,
		9,19,1,19,1,19,1,20,1,20,3,20,408,8,20,1,20,1,20,1,20,1,20,3,20,414,8,
		20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,422,8,21,1,22,1,22,1,22,1,22,1,22,
		5,22,429,8,22,10,22,12,22,432,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		3,22,441,8,22,1,23,1,23,3,23,445,8,23,1,23,1,23,3,23,449,8,23,1,24,1,24,
		1,24,1,25,1,25,1,25,1,25,1,26,3,26,459,8,26,1,26,1,26,1,26,1,26,3,26,465,
		8,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,473,8,27,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,3,28,482,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,
		492,8,30,1,31,1,31,1,31,3,31,497,8,31,1,31,1,31,3,31,501,8,31,1,32,1,32,
		1,32,5,32,506,8,32,10,32,12,32,509,9,32,1,32,1,32,3,32,513,8,32,1,32,1,
		32,1,33,1,33,1,33,3,33,520,8,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,528,
		8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,5,36,538,8,36,10,36,12,36,
		541,9,36,1,37,1,37,1,37,3,37,546,8,37,1,38,1,38,1,38,5,38,551,8,38,10,
		38,12,38,554,9,38,1,39,1,39,5,39,558,8,39,10,39,12,39,561,9,39,1,39,1,
		39,1,39,1,40,1,40,1,40,5,40,569,8,40,10,40,12,40,572,9,40,1,41,1,41,3,
		41,576,8,41,1,42,1,42,1,42,1,42,5,42,582,8,42,10,42,12,42,585,9,42,1,42,
		3,42,588,8,42,3,42,590,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,3,43,606,8,43,1,44,1,44,1,45,1,45,1,46,1,46,
		1,47,1,47,1,47,5,47,617,8,47,10,47,12,47,620,9,47,1,47,1,47,1,47,5,47,
		625,8,47,10,47,12,47,628,9,47,3,47,630,8,47,1,48,1,48,3,48,634,8,48,1,
		48,1,48,1,48,3,48,639,8,48,5,48,641,8,48,10,48,12,48,644,9,48,1,49,1,49,
		1,50,1,50,3,50,650,8,50,1,51,1,51,1,51,1,51,5,51,656,8,51,10,51,12,51,
		659,9,51,1,51,1,51,1,52,1,52,1,52,1,52,3,52,667,8,52,3,52,669,8,52,1,53,
		1,53,1,53,5,53,674,8,53,10,53,12,53,677,9,53,1,54,1,54,3,54,681,8,54,1,
		54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,3,56,692,8,56,1,56,1,56,3,56,
		696,8,56,1,57,1,57,1,58,1,58,3,58,702,8,58,1,58,5,58,705,8,58,10,58,12,
		58,708,9,58,1,58,1,58,1,59,3,59,713,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,3,59,722,8,59,1,59,1,59,1,59,1,59,3,59,728,8,59,1,60,1,60,1,60,5,
		60,733,8,60,10,60,12,60,736,9,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,744,
		8,61,1,62,1,62,1,63,1,63,1,64,4,64,751,8,64,11,64,12,64,752,1,65,1,65,
		1,65,1,65,1,65,3,65,760,8,65,1,65,3,65,763,8,65,1,66,1,66,1,66,5,66,768,
		8,66,10,66,12,66,771,9,66,1,67,1,67,1,67,5,67,776,8,67,10,67,12,67,779,
		9,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,3,69,788,8,69,1,70,1,70,1,70,1,
		70,5,70,794,8,70,10,70,12,70,797,9,70,3,70,799,8,70,1,70,3,70,802,8,70,
		1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,5,72,813,8,72,10,72,12,72,
		816,9,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,3,74,829,
		8,74,1,74,1,74,3,74,833,8,74,1,74,1,74,3,74,837,8,74,1,74,1,74,3,74,841,
		8,74,3,74,843,8,74,1,75,1,75,3,75,847,8,75,1,76,1,76,1,76,1,76,3,76,853,
		8,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,5,79,862,8,79,10,79,12,79,865,
		9,79,1,79,1,79,1,80,1,80,1,80,1,80,3,80,873,8,80,1,81,1,81,1,81,1,82,1,
		82,1,82,1,82,1,83,5,83,883,8,83,10,83,12,83,886,9,83,1,84,1,84,1,84,1,
		84,1,84,3,84,893,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,902,8,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,929,8,84,1,
		84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,941,8,84,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,3,84,950,8,84,1,84,1,84,1,84,3,84,955,8,84,1,
		84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,965,8,84,1,85,1,85,5,85,969,
		8,85,10,85,12,85,972,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,
		1,87,1,88,1,88,5,88,986,8,88,10,88,12,88,989,9,88,1,88,5,88,992,8,88,10,
		88,12,88,995,9,88,1,88,1,88,1,89,4,89,1000,8,89,11,89,12,89,1001,1,89,
		5,89,1005,8,89,10,89,12,89,1008,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
		1,90,1,90,1,90,3,90,1020,8,90,1,91,1,91,3,91,1024,8,91,1,91,1,91,3,91,
		1028,8,91,1,91,1,91,3,91,1032,8,91,3,91,1034,8,91,1,92,1,92,3,92,1038,
		8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,96,
		1,96,1,96,5,96,1055,8,96,10,96,12,96,1058,9,96,1,97,1,97,1,98,1,98,1,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1077,
		8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,3,99,1093,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1103,
		8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,3,99,1150,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,1,99,3,99,1164,8,99,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,3,99,1173,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1182,8,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1195,8,99,
		1,99,1,99,1,99,1,99,1,99,1,99,5,99,1203,8,99,10,99,12,99,1206,9,99,1,100,
		1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
		1,100,1,100,3,100,1223,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
		3,101,1232,8,101,3,101,1234,8,101,1,102,1,102,3,102,1238,8,102,1,103,3,
		103,1241,8,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,
		105,1,105,5,105,1254,8,105,10,105,12,105,1257,9,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,5,105,1266,8,105,10,105,12,105,1269,9,105,1,105,
		1,105,5,105,1273,8,105,10,105,12,105,1276,9,105,3,105,1278,8,105,1,106,
		1,106,3,106,1282,8,106,1,107,1,107,1,107,1,107,1,108,1,108,3,108,1290,
		8,108,1,108,1,108,1,108,0,1,198,109,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
		188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,0,11,1,0,32,
		39,2,0,8,8,41,41,2,0,41,41,45,45,1,0,90,92,1,0,47,48,1,0,67,70,1,0,71,
		72,2,0,6,6,73,74,1,0,69,70,1,0,76,77,1,0,67,68,1417,0,219,1,0,0,0,2,235,
		1,0,0,0,4,239,1,0,0,0,6,262,1,0,0,0,8,264,1,0,0,0,10,279,1,0,0,0,12,289,
		1,0,0,0,14,299,1,0,0,0,16,304,1,0,0,0,18,307,1,0,0,0,20,318,1,0,0,0,22,
		323,1,0,0,0,24,331,1,0,0,0,26,343,1,0,0,0,28,352,1,0,0,0,30,361,1,0,0,
		0,32,368,1,0,0,0,34,379,1,0,0,0,36,387,1,0,0,0,38,396,1,0,0,0,40,413,1,
		0,0,0,42,421,1,0,0,0,44,440,1,0,0,0,46,444,1,0,0,0,48,450,1,0,0,0,50,453,
		1,0,0,0,52,458,1,0,0,0,54,472,1,0,0,0,56,481,1,0,0,0,58,483,1,0,0,0,60,
		491,1,0,0,0,62,493,1,0,0,0,64,502,1,0,0,0,66,516,1,0,0,0,68,524,1,0,0,
		0,70,531,1,0,0,0,72,534,1,0,0,0,74,542,1,0,0,0,76,547,1,0,0,0,78,559,1,
		0,0,0,80,565,1,0,0,0,82,575,1,0,0,0,84,577,1,0,0,0,86,605,1,0,0,0,88,607,
		1,0,0,0,90,609,1,0,0,0,92,611,1,0,0,0,94,629,1,0,0,0,96,631,1,0,0,0,98,
		645,1,0,0,0,100,649,1,0,0,0,102,651,1,0,0,0,104,668,1,0,0,0,106,670,1,
		0,0,0,108,678,1,0,0,0,110,684,1,0,0,0,112,695,1,0,0,0,114,697,1,0,0,0,
		116,699,1,0,0,0,118,727,1,0,0,0,120,729,1,0,0,0,122,743,1,0,0,0,124,745,
		1,0,0,0,126,747,1,0,0,0,128,750,1,0,0,0,130,754,1,0,0,0,132,764,1,0,0,
		0,134,772,1,0,0,0,136,780,1,0,0,0,138,787,1,0,0,0,140,789,1,0,0,0,142,
		805,1,0,0,0,144,810,1,0,0,0,146,819,1,0,0,0,148,842,1,0,0,0,150,846,1,
		0,0,0,152,848,1,0,0,0,154,854,1,0,0,0,156,856,1,0,0,0,158,859,1,0,0,0,
		160,872,1,0,0,0,162,874,1,0,0,0,164,877,1,0,0,0,166,884,1,0,0,0,168,964,
		1,0,0,0,170,966,1,0,0,0,172,973,1,0,0,0,174,979,1,0,0,0,176,983,1,0,0,
		0,178,999,1,0,0,0,180,1019,1,0,0,0,182,1033,1,0,0,0,184,1037,1,0,0,0,186,
		1039,1,0,0,0,188,1045,1,0,0,0,190,1047,1,0,0,0,192,1051,1,0,0,0,194,1059,
		1,0,0,0,196,1061,1,0,0,0,198,1076,1,0,0,0,200,1222,1,0,0,0,202,1233,1,
		0,0,0,204,1237,1,0,0,0,206,1240,1,0,0,0,208,1245,1,0,0,0,210,1249,1,0,
		0,0,212,1279,1,0,0,0,214,1283,1,0,0,0,216,1287,1,0,0,0,218,220,3,2,1,0,
		219,218,1,0,0,0,219,220,1,0,0,0,220,224,1,0,0,0,221,223,3,4,2,0,222,221,
		1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,230,1,0,0,
		0,226,224,1,0,0,0,227,229,3,6,3,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
		228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,
		0,0,1,234,1,1,0,0,0,235,236,5,1,0,0,236,237,3,120,60,0,237,238,5,2,0,0,
		238,3,1,0,0,0,239,241,5,3,0,0,240,242,5,4,0,0,241,240,1,0,0,0,241,242,
		1,0,0,0,242,243,1,0,0,0,243,246,3,120,60,0,244,245,5,5,0,0,245,247,5,6,
		0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,2,0,0,249,
		5,1,0,0,0,250,252,3,14,7,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,
		0,0,253,254,1,0,0,0,254,259,1,0,0,0,255,253,1,0,0,0,256,260,3,8,4,0,257,
		260,3,12,6,0,258,260,3,10,5,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,
		1,0,0,0,260,263,1,0,0,0,261,263,5,2,0,0,262,253,1,0,0,0,262,261,1,0,0,
		0,263,7,1,0,0,0,264,265,5,7,0,0,265,267,5,98,0,0,266,268,3,18,9,0,267,
		266,1,0,0,0,267,268,1,0,0,0,268,271,1,0,0,0,269,270,5,8,0,0,270,272,3,
		94,47,0,271,269,1,0,0,0,271,272,1,0,0,0,272,275,1,0,0,0,273,274,5,9,0,
		0,274,276,3,34,17,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,
		278,3,36,18,0,278,9,1,0,0,0,279,280,5,96,0,0,280,283,5,98,0,0,281,282,
		5,9,0,0,282,284,3,34,17,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,
		0,0,285,286,3,24,12,0,286,11,1,0,0,0,287,290,3,32,16,0,288,290,3,142,71,
		0,289,287,1,0,0,0,289,288,1,0,0,0,290,13,1,0,0,0,291,300,3,130,65,0,292,
		300,5,10,0,0,293,300,5,11,0,0,294,300,5,12,0,0,295,300,5,13,0,0,296,300,
		5,4,0,0,297,300,5,14,0,0,298,300,5,15,0,0,299,291,1,0,0,0,299,292,1,0,
		0,0,299,293,1,0,0,0,299,294,1,0,0,0,299,295,1,0,0,0,299,296,1,0,0,0,299,
		297,1,0,0,0,299,298,1,0,0,0,300,15,1,0,0,0,301,303,3,86,43,0,302,301,1,
		0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,17,1,0,0,0,306,
		304,1,0,0,0,307,308,5,16,0,0,308,313,3,20,10,0,309,310,5,17,0,0,310,312,
		3,20,10,0,311,309,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,
		0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,18,0,0,317,19,1,0,0,0,318,
		321,5,98,0,0,319,320,5,8,0,0,320,322,3,22,11,0,321,319,1,0,0,0,321,322,
		1,0,0,0,322,21,1,0,0,0,323,328,3,94,47,0,324,325,5,19,0,0,325,327,3,94,
		47,0,326,324,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
		23,1,0,0,0,330,328,1,0,0,0,331,333,5,20,0,0,332,334,3,26,13,0,333,332,
		1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,5,17,0,0,336,335,1,0,0,
		0,336,337,1,0,0,0,337,339,1,0,0,0,338,340,3,30,15,0,339,338,1,0,0,0,339,
		340,1,0,0,0,340,341,1,0,0,0,341,342,5,21,0,0,342,25,1,0,0,0,343,348,3,
		28,14,0,344,345,5,17,0,0,345,347,3,28,14,0,346,344,1,0,0,0,347,350,1,0,
		0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,27,1,0,0,0,350,348,1,0,0,0,351,
		353,3,128,64,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,
		5,98,0,0,355,357,3,216,108,0,356,355,1,0,0,0,356,357,1,0,0,0,357,359,1,
		0,0,0,358,360,3,36,18,0,359,358,1,0,0,0,359,360,1,0,0,0,360,29,1,0,0,0,
		361,365,5,2,0,0,362,364,3,40,20,0,363,362,1,0,0,0,364,367,1,0,0,0,365,
		363,1,0,0,0,365,366,1,0,0,0,366,31,1,0,0,0,367,365,1,0,0,0,368,369,5,22,
		0,0,369,371,5,98,0,0,370,372,3,18,9,0,371,370,1,0,0,0,371,372,1,0,0,0,
		372,375,1,0,0,0,373,374,5,8,0,0,374,376,3,34,17,0,375,373,1,0,0,0,375,
		376,1,0,0,0,376,377,1,0,0,0,377,378,3,38,19,0,378,33,1,0,0,0,379,384,3,
		94,47,0,380,381,5,17,0,0,381,383,3,94,47,0,382,380,1,0,0,0,383,386,1,0,
		0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,35,1,0,0,0,386,384,1,0,0,0,387,
		391,5,20,0,0,388,390,3,40,20,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,
		1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,21,0,
		0,395,37,1,0,0,0,396,400,5,20,0,0,397,399,3,54,27,0,398,397,1,0,0,0,399,
		402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,400,1,
		0,0,0,403,404,5,21,0,0,404,39,1,0,0,0,405,414,5,2,0,0,406,408,5,4,0,0,
		407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,414,3,158,79,0,410,
		411,3,16,8,0,411,412,3,42,21,0,412,414,1,0,0,0,413,405,1,0,0,0,413,407,
		1,0,0,0,413,410,1,0,0,0,414,41,1,0,0,0,415,422,3,48,24,0,416,422,3,44,
		22,0,417,422,3,50,25,0,418,422,3,52,26,0,419,422,3,12,6,0,420,422,3,8,
		4,0,421,415,1,0,0,0,421,416,1,0,0,0,421,417,1,0,0,0,421,418,1,0,0,0,421,
		419,1,0,0,0,421,420,1,0,0,0,422,43,1,0,0,0,423,424,3,94,47,0,424,425,5,
		98,0,0,425,430,3,108,54,0,426,427,5,23,0,0,427,429,5,24,0,0,428,426,1,
		0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,
		432,430,1,0,0,0,433,434,3,46,23,0,434,441,1,0,0,0,435,436,5,25,0,0,436,
		437,5,98,0,0,437,438,3,108,54,0,438,439,3,46,23,0,439,441,1,0,0,0,440,
		423,1,0,0,0,440,435,1,0,0,0,441,45,1,0,0,0,442,443,5,26,0,0,443,445,3,
		106,53,0,444,442,1,0,0,0,444,445,1,0,0,0,445,448,1,0,0,0,446,449,3,114,
		57,0,447,449,5,2,0,0,448,446,1,0,0,0,448,447,1,0,0,0,449,47,1,0,0,0,450,
		451,3,18,9,0,451,452,3,44,22,0,452,49,1,0,0,0,453,454,3,94,47,0,454,455,
		3,72,36,0,455,456,5,2,0,0,456,51,1,0,0,0,457,459,3,18,9,0,458,457,1,0,
		0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,5,98,0,0,461,464,3,108,54,
		0,462,463,5,26,0,0,463,465,3,106,53,0,464,462,1,0,0,0,464,465,1,0,0,0,
		465,466,1,0,0,0,466,467,3,116,58,0,467,53,1,0,0,0,468,469,3,16,8,0,469,
		470,3,56,28,0,470,473,1,0,0,0,471,473,5,2,0,0,472,468,1,0,0,0,472,471,
		1,0,0,0,473,55,1,0,0,0,474,482,3,58,29,0,475,482,3,66,33,0,476,477,5,25,
		0,0,477,478,5,98,0,0,478,482,3,68,34,0,479,482,3,12,6,0,480,482,3,8,4,
		0,481,474,1,0,0,0,481,475,1,0,0,0,481,476,1,0,0,0,481,479,1,0,0,0,481,
		480,1,0,0,0,482,57,1,0,0,0,483,484,3,94,47,0,484,485,5,98,0,0,485,486,
		3,60,30,0,486,59,1,0,0,0,487,488,3,76,38,0,488,489,5,2,0,0,489,492,1,0,
		0,0,490,492,3,64,32,0,491,487,1,0,0,0,491,490,1,0,0,0,492,61,1,0,0,0,493,
		496,3,108,54,0,494,495,5,26,0,0,495,497,3,106,53,0,496,494,1,0,0,0,496,
		497,1,0,0,0,497,500,1,0,0,0,498,501,3,114,57,0,499,501,5,2,0,0,500,498,
		1,0,0,0,500,499,1,0,0,0,501,63,1,0,0,0,502,507,3,108,54,0,503,504,5,23,
		0,0,504,506,5,24,0,0,505,503,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,
		508,1,0,0,0,508,512,1,0,0,0,509,507,1,0,0,0,510,511,5,26,0,0,511,513,3,
		106,53,0,512,510,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,5,2,0,
		0,515,65,1,0,0,0,516,519,3,18,9,0,517,520,3,94,47,0,518,520,5,25,0,0,519,
		517,1,0,0,0,519,518,1,0,0,0,520,521,1,0,0,0,521,522,5,98,0,0,522,523,3,
		64,32,0,523,67,1,0,0,0,524,527,3,108,54,0,525,526,5,26,0,0,526,528,3,106,
		53,0,527,525,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,2,0,0,530,
		69,1,0,0,0,531,532,5,98,0,0,532,533,3,78,39,0,533,71,1,0,0,0,534,539,3,
		74,37,0,535,536,5,17,0,0,536,538,3,74,37,0,537,535,1,0,0,0,538,541,1,0,
		0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,73,1,0,0,0,541,539,1,0,0,0,542,
		545,3,80,40,0,543,544,5,27,0,0,544,546,3,82,41,0,545,543,1,0,0,0,545,546,
		1,0,0,0,546,75,1,0,0,0,547,552,3,78,39,0,548,549,5,17,0,0,549,551,3,70,
		35,0,550,548,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,
		77,1,0,0,0,554,552,1,0,0,0,555,556,5,23,0,0,556,558,5,24,0,0,557,555,1,
		0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,
		561,559,1,0,0,0,562,563,5,27,0,0,563,564,3,82,41,0,564,79,1,0,0,0,565,
		570,5,98,0,0,566,567,5,23,0,0,567,569,5,24,0,0,568,566,1,0,0,0,569,572,
		1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,81,1,0,0,0,572,570,1,0,0,0,
		573,576,3,84,42,0,574,576,3,198,99,0,575,573,1,0,0,0,575,574,1,0,0,0,576,
		83,1,0,0,0,577,589,5,20,0,0,578,583,3,82,41,0,579,580,5,17,0,0,580,582,
		3,82,41,0,581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,
		0,0,584,587,1,0,0,0,585,583,1,0,0,0,586,588,5,17,0,0,587,586,1,0,0,0,587,
		588,1,0,0,0,588,590,1,0,0,0,589,578,1,0,0,0,589,590,1,0,0,0,590,591,1,
		0,0,0,591,592,5,21,0,0,592,85,1,0,0,0,593,606,3,130,65,0,594,606,5,10,
		0,0,595,606,5,11,0,0,596,606,5,12,0,0,597,606,5,4,0,0,598,606,5,13,0,0,
		599,606,5,14,0,0,600,606,5,28,0,0,601,606,5,29,0,0,602,606,5,30,0,0,603,
		606,5,31,0,0,604,606,5,15,0,0,605,593,1,0,0,0,605,594,1,0,0,0,605,595,
		1,0,0,0,605,596,1,0,0,0,605,597,1,0,0,0,605,598,1,0,0,0,605,599,1,0,0,
		0,605,600,1,0,0,0,605,601,1,0,0,0,605,602,1,0,0,0,605,603,1,0,0,0,605,
		604,1,0,0,0,606,87,1,0,0,0,607,608,3,120,60,0,608,89,1,0,0,0,609,610,5,
		98,0,0,610,91,1,0,0,0,611,612,3,120,60,0,612,93,1,0,0,0,613,618,3,96,48,
		0,614,615,5,23,0,0,615,617,5,24,0,0,616,614,1,0,0,0,617,620,1,0,0,0,618,
		616,1,0,0,0,618,619,1,0,0,0,619,630,1,0,0,0,620,618,1,0,0,0,621,626,3,
		98,49,0,622,623,5,23,0,0,623,625,5,24,0,0,624,622,1,0,0,0,625,628,1,0,
		0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,629,
		613,1,0,0,0,629,621,1,0,0,0,630,95,1,0,0,0,631,633,5,98,0,0,632,634,3,
		102,51,0,633,632,1,0,0,0,633,634,1,0,0,0,634,642,1,0,0,0,635,636,5,5,0,
		0,636,638,5,98,0,0,637,639,3,102,51,0,638,637,1,0,0,0,638,639,1,0,0,0,
		639,641,1,0,0,0,640,635,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,
		1,0,0,0,643,97,1,0,0,0,644,642,1,0,0,0,645,646,7,0,0,0,646,99,1,0,0,0,
		647,650,5,14,0,0,648,650,3,130,65,0,649,647,1,0,0,0,649,648,1,0,0,0,650,
		101,1,0,0,0,651,652,5,16,0,0,652,657,3,104,52,0,653,654,5,17,0,0,654,656,
		3,104,52,0,655,653,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,
		0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,5,18,0,0,661,103,1,0,0,0,662,
		669,3,94,47,0,663,666,5,40,0,0,664,665,7,1,0,0,665,667,3,94,47,0,666,664,
		1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,662,1,0,0,0,668,663,1,0,0,
		0,669,105,1,0,0,0,670,675,3,120,60,0,671,672,5,17,0,0,672,674,3,120,60,
		0,673,671,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,
		107,1,0,0,0,677,675,1,0,0,0,678,680,5,42,0,0,679,681,3,110,55,0,680,679,
		1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,683,5,43,0,0,683,109,1,0,0,
		0,684,685,3,166,83,0,685,686,3,94,47,0,686,687,3,112,56,0,687,111,1,0,
		0,0,688,691,3,80,40,0,689,690,5,17,0,0,690,692,3,110,55,0,691,689,1,0,
		0,0,691,692,1,0,0,0,692,696,1,0,0,0,693,694,5,44,0,0,694,696,3,80,40,0,
		695,688,1,0,0,0,695,693,1,0,0,0,696,113,1,0,0,0,697,698,3,158,79,0,698,
		115,1,0,0,0,699,701,5,20,0,0,700,702,3,118,59,0,701,700,1,0,0,0,701,702,
		1,0,0,0,702,706,1,0,0,0,703,705,3,160,80,0,704,703,1,0,0,0,705,708,1,0,
		0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,
		710,5,21,0,0,710,117,1,0,0,0,711,713,3,214,107,0,712,711,1,0,0,0,712,713,
		1,0,0,0,713,714,1,0,0,0,714,715,7,2,0,0,715,716,3,216,108,0,716,717,5,
		2,0,0,717,728,1,0,0,0,718,719,3,200,100,0,719,721,5,5,0,0,720,722,3,214,
		107,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,724,5,41,0,0,
		724,725,3,216,108,0,725,726,5,2,0,0,726,728,1,0,0,0,727,712,1,0,0,0,727,
		718,1,0,0,0,728,119,1,0,0,0,729,734,5,98,0,0,730,731,5,5,0,0,731,733,5,
		98,0,0,732,730,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,
		735,121,1,0,0,0,736,734,1,0,0,0,737,744,3,124,62,0,738,744,5,93,0,0,739,
		744,5,94,0,0,740,744,5,95,0,0,741,744,3,126,63,0,742,744,5,46,0,0,743,
		737,1,0,0,0,743,738,1,0,0,0,743,739,1,0,0,0,743,740,1,0,0,0,743,741,1,
		0,0,0,743,742,1,0,0,0,744,123,1,0,0,0,745,746,7,3,0,0,746,125,1,0,0,0,
		747,748,7,4,0,0,748,127,1,0,0,0,749,751,3,130,65,0,750,749,1,0,0,0,751,
		752,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,129,1,0,0,0,754,755,5,
		49,0,0,755,762,3,132,66,0,756,759,5,42,0,0,757,760,3,134,67,0,758,760,
		3,138,69,0,759,757,1,0,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,
		0,0,761,763,5,43,0,0,762,756,1,0,0,0,762,763,1,0,0,0,763,131,1,0,0,0,764,
		769,5,98,0,0,765,766,5,5,0,0,766,768,5,98,0,0,767,765,1,0,0,0,768,771,
		1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,133,1,0,0,0,771,769,1,0,0,
		0,772,777,3,136,68,0,773,774,5,17,0,0,774,776,3,136,68,0,775,773,1,0,0,
		0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,135,1,0,0,0,779,
		777,1,0,0,0,780,781,5,98,0,0,781,782,5,27,0,0,782,783,3,138,69,0,783,137,
		1,0,0,0,784,788,3,198,99,0,785,788,3,130,65,0,786,788,3,140,70,0,787,784,
		1,0,0,0,787,785,1,0,0,0,787,786,1,0,0,0,788,139,1,0,0,0,789,798,5,20,0,
		0,790,795,3,138,69,0,791,792,5,17,0,0,792,794,3,138,69,0,793,791,1,0,0,
		0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,799,1,0,0,0,797,
		795,1,0,0,0,798,790,1,0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,802,5,
		17,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,5,21,0,
		0,804,141,1,0,0,0,805,806,5,49,0,0,806,807,5,22,0,0,807,808,5,98,0,0,808,
		809,3,144,72,0,809,143,1,0,0,0,810,814,5,20,0,0,811,813,3,146,73,0,812,
		811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,817,1,
		0,0,0,816,814,1,0,0,0,817,818,5,21,0,0,818,145,1,0,0,0,819,820,3,16,8,
		0,820,821,3,148,74,0,821,147,1,0,0,0,822,823,3,94,47,0,823,824,3,150,75,
		0,824,825,5,2,0,0,825,843,1,0,0,0,826,828,3,8,4,0,827,829,5,2,0,0,828,
		827,1,0,0,0,828,829,1,0,0,0,829,843,1,0,0,0,830,832,3,32,16,0,831,833,
		5,2,0,0,832,831,1,0,0,0,832,833,1,0,0,0,833,843,1,0,0,0,834,836,3,10,5,
		0,835,837,5,2,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,843,1,0,0,0,838,
		840,3,142,71,0,839,841,5,2,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,843,
		1,0,0,0,842,822,1,0,0,0,842,826,1,0,0,0,842,830,1,0,0,0,842,834,1,0,0,
		0,842,838,1,0,0,0,843,149,1,0,0,0,844,847,3,152,76,0,845,847,3,154,77,
		0,846,844,1,0,0,0,846,845,1,0,0,0,847,151,1,0,0,0,848,849,5,98,0,0,849,
		850,5,42,0,0,850,852,5,43,0,0,851,853,3,156,78,0,852,851,1,0,0,0,852,853,
		1,0,0,0,853,153,1,0,0,0,854,855,3,72,36,0,855,155,1,0,0,0,856,857,5,50,
		0,0,857,858,3,138,69,0,858,157,1,0,0,0,859,863,5,20,0,0,860,862,3,160,
		80,0,861,860,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,
		866,1,0,0,0,865,863,1,0,0,0,866,867,5,21,0,0,867,159,1,0,0,0,868,873,3,
		162,81,0,869,873,3,8,4,0,870,873,3,12,6,0,871,873,3,168,84,0,872,868,1,
		0,0,0,872,869,1,0,0,0,872,870,1,0,0,0,872,871,1,0,0,0,873,161,1,0,0,0,
		874,875,3,164,82,0,875,876,5,2,0,0,876,163,1,0,0,0,877,878,3,166,83,0,
		878,879,3,94,47,0,879,880,3,72,36,0,880,165,1,0,0,0,881,883,3,100,50,0,
		882,881,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,167,
		1,0,0,0,886,884,1,0,0,0,887,965,3,158,79,0,888,889,5,97,0,0,889,892,3,
		198,99,0,890,891,5,51,0,0,891,893,3,198,99,0,892,890,1,0,0,0,892,893,1,
		0,0,0,893,894,1,0,0,0,894,895,5,2,0,0,895,965,1,0,0,0,896,897,5,52,0,0,
		897,898,3,190,95,0,898,901,3,168,84,0,899,900,5,53,0,0,900,902,3,168,84,
		0,901,899,1,0,0,0,901,902,1,0,0,0,902,965,1,0,0,0,903,904,5,54,0,0,904,
		905,5,42,0,0,905,906,3,182,91,0,906,907,5,43,0,0,907,908,3,168,84,0,908,
		965,1,0,0,0,909,910,5,55,0,0,910,911,3,190,95,0,911,912,3,168,84,0,912,
		965,1,0,0,0,913,914,5,56,0,0,914,915,3,168,84,0,915,916,5,55,0,0,916,917,
		3,190,95,0,917,918,5,2,0,0,918,965,1,0,0,0,919,920,5,57,0,0,920,928,3,
		158,79,0,921,922,3,170,85,0,922,923,5,58,0,0,923,924,3,158,79,0,924,929,
		1,0,0,0,925,929,3,170,85,0,926,927,5,58,0,0,927,929,3,158,79,0,928,921,
		1,0,0,0,928,925,1,0,0,0,928,926,1,0,0,0,929,965,1,0,0,0,930,931,5,59,0,
		0,931,932,3,190,95,0,932,933,3,176,88,0,933,965,1,0,0,0,934,935,5,29,0,
		0,935,936,3,190,95,0,936,937,3,158,79,0,937,965,1,0,0,0,938,940,5,60,0,
		0,939,941,3,198,99,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,
		965,5,2,0,0,943,944,5,61,0,0,944,945,3,198,99,0,945,946,5,2,0,0,946,965,
		1,0,0,0,947,949,5,62,0,0,948,950,5,98,0,0,949,948,1,0,0,0,949,950,1,0,
		0,0,950,951,1,0,0,0,951,965,5,2,0,0,952,954,5,63,0,0,953,955,5,98,0,0,
		954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,965,5,2,0,0,957,965,
		5,2,0,0,958,959,3,194,97,0,959,960,5,2,0,0,960,965,1,0,0,0,961,962,5,98,
		0,0,962,963,5,51,0,0,963,965,3,168,84,0,964,887,1,0,0,0,964,888,1,0,0,
		0,964,896,1,0,0,0,964,903,1,0,0,0,964,909,1,0,0,0,964,913,1,0,0,0,964,
		919,1,0,0,0,964,930,1,0,0,0,964,934,1,0,0,0,964,938,1,0,0,0,964,943,1,
		0,0,0,964,947,1,0,0,0,964,952,1,0,0,0,964,957,1,0,0,0,964,958,1,0,0,0,
		964,961,1,0,0,0,965,169,1,0,0,0,966,970,3,172,86,0,967,969,3,172,86,0,
		968,967,1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,171,
		1,0,0,0,972,970,1,0,0,0,973,974,5,64,0,0,974,975,5,42,0,0,975,976,3,174,
		87,0,976,977,5,43,0,0,977,978,3,158,79,0,978,173,1,0,0,0,979,980,3,166,
		83,0,980,981,3,94,47,0,981,982,3,80,40,0,982,175,1,0,0,0,983,987,5,20,
		0,0,984,986,3,178,89,0,985,984,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,
		987,988,1,0,0,0,988,993,1,0,0,0,989,987,1,0,0,0,990,992,3,180,90,0,991,
		990,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,1,
		0,0,0,995,993,1,0,0,0,996,997,5,21,0,0,997,177,1,0,0,0,998,1000,3,180,
		90,0,999,998,1,0,0,0,1000,1001,1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,
		0,0,1002,1006,1,0,0,0,1003,1005,3,160,80,0,1004,1003,1,0,0,0,1005,1008,
		1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,179,1,0,0,0,1008,1006,
		1,0,0,0,1009,1010,5,65,0,0,1010,1011,3,196,98,0,1011,1012,5,51,0,0,1012,
		1020,1,0,0,0,1013,1014,5,65,0,0,1014,1015,3,90,45,0,1015,1016,5,51,0,0,
		1016,1020,1,0,0,0,1017,1018,5,50,0,0,1018,1020,5,51,0,0,1019,1009,1,0,
		0,0,1019,1013,1,0,0,0,1019,1017,1,0,0,0,1020,181,1,0,0,0,1021,1034,3,186,
		93,0,1022,1024,3,184,92,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
		1,0,0,0,1025,1027,5,2,0,0,1026,1028,3,198,99,0,1027,1026,1,0,0,0,1027,
		1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,5,2,0,0,1030,1032,3,188,94,0,
		1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,1021,1,0,0,
		0,1033,1023,1,0,0,0,1034,183,1,0,0,0,1035,1038,3,164,82,0,1036,1038,3,
		192,96,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,185,1,0,0,0,1039,1040,
		3,166,83,0,1040,1041,3,94,47,0,1041,1042,5,98,0,0,1042,1043,5,51,0,0,1043,
		1044,3,198,99,0,1044,187,1,0,0,0,1045,1046,3,192,96,0,1046,189,1,0,0,0,
		1047,1048,5,42,0,0,1048,1049,3,198,99,0,1049,1050,5,43,0,0,1050,191,1,
		0,0,0,1051,1056,3,198,99,0,1052,1053,5,17,0,0,1053,1055,3,198,99,0,1054,
		1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,
		193,1,0,0,0,1058,1056,1,0,0,0,1059,1060,3,198,99,0,1060,195,1,0,0,0,1061,
		1062,3,198,99,0,1062,197,1,0,0,0,1063,1064,6,99,-1,0,1064,1077,3,200,100,
		0,1065,1066,7,5,0,0,1066,1077,3,198,99,17,1067,1068,7,6,0,0,1068,1077,
		3,198,99,16,1069,1070,5,42,0,0,1070,1071,3,94,47,0,1071,1072,5,43,0,0,
		1072,1073,3,198,99,15,1073,1077,1,0,0,0,1074,1075,5,66,0,0,1075,1077,3,
		202,101,0,1076,1063,1,0,0,0,1076,1065,1,0,0,0,1076,1067,1,0,0,0,1076,1069,
		1,0,0,0,1076,1074,1,0,0,0,1077,1204,1,0,0,0,1078,1079,10,13,0,0,1079,1080,
		7,7,0,0,1080,1203,3,198,99,14,1081,1082,10,12,0,0,1082,1083,7,8,0,0,1083,
		1203,3,198,99,13,1084,1092,10,11,0,0,1085,1086,5,16,0,0,1086,1093,5,16,
		0,0,1087,1088,5,18,0,0,1088,1089,5,18,0,0,1089,1093,5,18,0,0,1090,1091,
		5,18,0,0,1091,1093,5,18,0,0,1092,1085,1,0,0,0,1092,1087,1,0,0,0,1092,1090,
		1,0,0,0,1093,1094,1,0,0,0,1094,1203,3,198,99,12,1095,1102,10,10,0,0,1096,
		1097,5,16,0,0,1097,1103,5,27,0,0,1098,1099,5,18,0,0,1099,1103,5,27,0,0,
		1100,1103,5,18,0,0,1101,1103,5,16,0,0,1102,1096,1,0,0,0,1102,1098,1,0,
		0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1203,3,
		198,99,11,1105,1106,10,8,0,0,1106,1107,7,9,0,0,1107,1203,3,198,99,9,1108,
		1109,10,7,0,0,1109,1110,5,19,0,0,1110,1203,3,198,99,8,1111,1112,10,6,0,
		0,1112,1113,5,78,0,0,1113,1203,3,198,99,7,1114,1115,10,5,0,0,1115,1116,
		5,79,0,0,1116,1203,3,198,99,6,1117,1118,10,4,0,0,1118,1119,5,80,0,0,1119,
		1203,3,198,99,5,1120,1121,10,3,0,0,1121,1122,5,81,0,0,1122,1203,3,198,
		99,4,1123,1124,10,2,0,0,1124,1125,5,40,0,0,1125,1126,3,198,99,0,1126,1127,
		5,51,0,0,1127,1128,3,198,99,3,1128,1203,1,0,0,0,1129,1149,10,1,0,0,1130,
		1150,5,82,0,0,1131,1150,5,83,0,0,1132,1150,5,84,0,0,1133,1150,5,85,0,0,
		1134,1150,5,86,0,0,1135,1150,5,87,0,0,1136,1150,5,88,0,0,1137,1150,5,27,
		0,0,1138,1139,5,18,0,0,1139,1140,5,18,0,0,1140,1150,5,27,0,0,1141,1142,
		5,18,0,0,1142,1143,5,18,0,0,1143,1144,5,18,0,0,1144,1150,5,27,0,0,1145,
		1146,5,16,0,0,1146,1147,5,16,0,0,1147,1150,5,27,0,0,1148,1150,5,89,0,0,
		1149,1130,1,0,0,0,1149,1131,1,0,0,0,1149,1132,1,0,0,0,1149,1133,1,0,0,
		0,1149,1134,1,0,0,0,1149,1135,1,0,0,0,1149,1136,1,0,0,0,1149,1137,1,0,
		0,0,1149,1138,1,0,0,0,1149,1141,1,0,0,0,1149,1145,1,0,0,0,1149,1148,1,
		0,0,0,1150,1151,1,0,0,0,1151,1203,3,198,99,2,1152,1153,10,26,0,0,1153,
		1154,5,5,0,0,1154,1203,5,98,0,0,1155,1156,10,25,0,0,1156,1157,5,5,0,0,
		1157,1203,5,45,0,0,1158,1159,10,24,0,0,1159,1160,5,5,0,0,1160,1161,5,41,
		0,0,1161,1163,5,42,0,0,1162,1164,3,192,96,0,1163,1162,1,0,0,0,1163,1164,
		1,0,0,0,1164,1165,1,0,0,0,1165,1203,5,43,0,0,1166,1167,10,23,0,0,1167,
		1168,5,5,0,0,1168,1169,5,66,0,0,1169,1170,5,98,0,0,1170,1172,5,42,0,0,
		1171,1173,3,192,96,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,
		0,0,1174,1203,5,43,0,0,1175,1176,10,22,0,0,1176,1177,5,5,0,0,1177,1178,
		5,41,0,0,1178,1179,5,5,0,0,1179,1181,5,98,0,0,1180,1182,3,216,108,0,1181,
		1180,1,0,0,0,1181,1182,1,0,0,0,1182,1203,1,0,0,0,1183,1184,10,21,0,0,1184,
		1185,5,5,0,0,1185,1203,3,208,104,0,1186,1187,10,20,0,0,1187,1188,5,23,
		0,0,1188,1189,3,198,99,0,1189,1190,5,24,0,0,1190,1203,1,0,0,0,1191,1192,
		10,19,0,0,1192,1194,5,42,0,0,1193,1195,3,192,96,0,1194,1193,1,0,0,0,1194,
		1195,1,0,0,0,1195,1196,1,0,0,0,1196,1203,5,43,0,0,1197,1198,10,18,0,0,
		1198,1203,7,10,0,0,1199,1200,10,9,0,0,1200,1201,5,75,0,0,1201,1203,3,94,
		47,0,1202,1078,1,0,0,0,1202,1081,1,0,0,0,1202,1084,1,0,0,0,1202,1095,1,
		0,0,0,1202,1105,1,0,0,0,1202,1108,1,0,0,0,1202,1111,1,0,0,0,1202,1114,
		1,0,0,0,1202,1117,1,0,0,0,1202,1120,1,0,0,0,1202,1123,1,0,0,0,1202,1129,
		1,0,0,0,1202,1152,1,0,0,0,1202,1155,1,0,0,0,1202,1158,1,0,0,0,1202,1166,
		1,0,0,0,1202,1175,1,0,0,0,1202,1183,1,0,0,0,1202,1186,1,0,0,0,1202,1191,
		1,0,0,0,1202,1197,1,0,0,0,1202,1199,1,0,0,0,1203,1206,1,0,0,0,1204,1202,
		1,0,0,0,1204,1205,1,0,0,0,1205,199,1,0,0,0,1206,1204,1,0,0,0,1207,1208,
		5,42,0,0,1208,1209,3,198,99,0,1209,1210,5,43,0,0,1210,1223,1,0,0,0,1211,
		1223,5,45,0,0,1212,1223,5,41,0,0,1213,1223,3,122,61,0,1214,1223,5,98,0,
		0,1215,1216,3,94,47,0,1216,1217,5,5,0,0,1217,1218,5,7,0,0,1218,1223,1,
		0,0,0,1219,1220,5,25,0,0,1220,1221,5,5,0,0,1221,1223,5,7,0,0,1222,1207,
		1,0,0,0,1222,1211,1,0,0,0,1222,1212,1,0,0,0,1222,1213,1,0,0,0,1222,1214,
		1,0,0,0,1222,1215,1,0,0,0,1222,1219,1,0,0,0,1223,201,1,0,0,0,1224,1225,
		3,214,107,0,1225,1226,3,204,102,0,1226,1227,3,212,106,0,1227,1234,1,0,
		0,0,1228,1231,3,204,102,0,1229,1232,3,210,105,0,1230,1232,3,212,106,0,
		1231,1229,1,0,0,0,1231,1230,1,0,0,0,1232,1234,1,0,0,0,1233,1224,1,0,0,
		0,1233,1228,1,0,0,0,1234,203,1,0,0,0,1235,1238,3,96,48,0,1236,1238,3,98,
		49,0,1237,1235,1,0,0,0,1237,1236,1,0,0,0,1238,205,1,0,0,0,1239,1241,3,
		214,107,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1243,
		5,98,0,0,1243,1244,3,212,106,0,1244,207,1,0,0,0,1245,1246,3,214,107,0,
		1246,1247,5,98,0,0,1247,1248,3,216,108,0,1248,209,1,0,0,0,1249,1277,5,
		23,0,0,1250,1255,5,24,0,0,1251,1252,5,23,0,0,1252,1254,5,24,0,0,1253,1251,
		1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1258,
		1,0,0,0,1257,1255,1,0,0,0,1258,1278,3,84,42,0,1259,1260,3,198,99,0,1260,
		1267,5,24,0,0,1261,1262,5,23,0,0,1262,1263,3,198,99,0,1263,1264,5,24,0,
		0,1264,1266,1,0,0,0,1265,1261,1,0,0,0,1266,1269,1,0,0,0,1267,1265,1,0,
		0,0,1267,1268,1,0,0,0,1268,1274,1,0,0,0,1269,1267,1,0,0,0,1270,1271,5,
		23,0,0,1271,1273,5,24,0,0,1272,1270,1,0,0,0,1273,1276,1,0,0,0,1274,1272,
		1,0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1277,1250,
		1,0,0,0,1277,1259,1,0,0,0,1278,211,1,0,0,0,1279,1281,3,216,108,0,1280,
		1282,3,36,18,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,213,1,0,0,0,1283,
		1284,5,16,0,0,1284,1285,3,34,17,0,1285,1286,5,18,0,0,1286,215,1,0,0,0,
		1287,1289,5,42,0,0,1288,1290,3,192,96,0,1289,1288,1,0,0,0,1289,1290,1,
		0,0,0,1290,1291,1,0,0,0,1291,1292,5,43,0,0,1292,217,1,0,0,0,140,219,224,
		230,241,246,253,259,262,267,271,275,283,289,299,304,313,321,328,333,336,
		339,348,352,356,359,365,371,375,384,391,400,407,413,421,430,440,444,448,
		458,464,472,481,491,496,500,507,512,519,527,539,545,552,559,570,575,583,
		587,589,605,618,626,629,633,638,642,649,657,666,668,675,680,691,695,701,
		706,712,721,727,734,743,752,759,762,769,777,787,795,798,801,814,828,832,
		836,840,842,846,852,863,872,884,892,901,928,940,949,954,964,970,987,993,
		1001,1006,1019,1023,1027,1031,1033,1037,1056,1076,1092,1102,1149,1163,
		1172,1181,1194,1202,1204,1222,1231,1233,1237,1240,1255,1267,1274,1277,
		1281,1289
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
