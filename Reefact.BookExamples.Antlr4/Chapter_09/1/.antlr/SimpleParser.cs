//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Simple.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SimpleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, INT=9, 
		ID=10, WS=11;
	public const int
		RULE_prog = 0, RULE_classDef = 1, RULE_member = 2, RULE_stat = 3, RULE_expr = 4;
	public static readonly string[] ruleNames = {
		"prog", "classDef", "member", "stat", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'{'", "'}'", "'int'", "';'", "'('", "')'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		private readonly List<string> _output = new();

		public IEnumerable<string> GetOutput() => _output;

		public SimpleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10;
				classDef();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public IToken _ID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			Match(T__0);
			State = 16;
			_localctx._ID = Match(ID);
			State = 17;
			Match(T__1);
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 18;
				member();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 23;
			Match(T__2);
			 _output.Add("class " + (_localctx._ID!=null?_localctx._ID.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public IToken _ID;
		public IToken f;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SimpleParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SimpleParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 4, RULE_member);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				Match(T__3);
				State = 27;
				_localctx._ID = Match(ID);
				State = 28;
				Match(T__4);
				 _output.Add("var " + (_localctx._ID!=null?_localctx._ID.Text:null)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				Match(T__3);
				State = 31;
				_localctx.f = Match(ID);
				State = 32;
				Match(T__5);
				State = 33;
				Match(ID);
				State = 34;
				Match(T__6);
				State = 35;
				Match(T__1);
				State = 36;
				stat();
				State = 37;
				Match(T__2);
				 _output.Add("method: " + (_localctx.f!=null?_localctx.f.Text:null)); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public ExprContext _expr;
		public IToken _ID;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				_localctx._expr = expr();
				State = 43;
				Match(T__4);
				 _output.Add("found expr: " + (_localctx._expr!=null?TokenStream.GetText(_localctx._expr.Start,_localctx._expr.Stop):null)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				_localctx._ID = Match(ID);
				State = 47;
				Match(T__7);
				State = 48;
				_localctx._expr = expr();
				State = 49;
				Match(T__4);
				 _output.Add($"found assign: {(_localctx._ID!=null?_localctx._ID.Text:null)}={(_localctx._expr!=null?TokenStream.GetText(_localctx._expr.Start,_localctx._expr.Stop):null)}"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SimpleParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleParser.ID, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(INT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				Match(ID);
				State = 56;
				Match(T__5);
				State = 57;
				Match(INT);
				State = 58;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,62,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,4,0,12,8,0,11,0,
		12,0,13,1,1,1,1,1,1,1,1,4,1,20,8,1,11,1,12,1,21,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,41,8,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,53,8,3,1,4,1,4,1,4,1,4,1,4,3,4,60,8,4,1,
		4,0,0,5,0,2,4,6,8,0,0,61,0,11,1,0,0,0,2,15,1,0,0,0,4,40,1,0,0,0,6,52,1,
		0,0,0,8,59,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,13,1,0,0,0,13,11,1,0,
		0,0,13,14,1,0,0,0,14,1,1,0,0,0,15,16,5,1,0,0,16,17,5,10,0,0,17,19,5,2,
		0,0,18,20,3,4,2,0,19,18,1,0,0,0,20,21,1,0,0,0,21,19,1,0,0,0,21,22,1,0,
		0,0,22,23,1,0,0,0,23,24,5,3,0,0,24,25,6,1,-1,0,25,3,1,0,0,0,26,27,5,4,
		0,0,27,28,5,10,0,0,28,29,5,5,0,0,29,41,6,2,-1,0,30,31,5,4,0,0,31,32,5,
		10,0,0,32,33,5,6,0,0,33,34,5,10,0,0,34,35,5,7,0,0,35,36,5,2,0,0,36,37,
		3,6,3,0,37,38,5,3,0,0,38,39,6,2,-1,0,39,41,1,0,0,0,40,26,1,0,0,0,40,30,
		1,0,0,0,41,5,1,0,0,0,42,43,3,8,4,0,43,44,5,5,0,0,44,45,6,3,-1,0,45,53,
		1,0,0,0,46,47,5,10,0,0,47,48,5,8,0,0,48,49,3,8,4,0,49,50,5,5,0,0,50,51,
		6,3,-1,0,51,53,1,0,0,0,52,42,1,0,0,0,52,46,1,0,0,0,53,7,1,0,0,0,54,60,
		5,9,0,0,55,56,5,10,0,0,56,57,5,6,0,0,57,58,5,9,0,0,58,60,5,7,0,0,59,54,
		1,0,0,0,59,55,1,0,0,0,60,9,1,0,0,0,5,13,21,40,52,59
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
